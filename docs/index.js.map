{"version":3,"file":"index.js","sources":["../node_modules/lit-html/lib/directive.js","../node_modules/lit-html/lib/dom.js","../node_modules/lit-html/lib/part.js","../node_modules/lit-html/lib/template.js","../node_modules/lit-html/lib/template-instance.js","../node_modules/lit-html/lib/template-result.js","../node_modules/lit-html/lib/parts.js","../node_modules/lit-html/lib/default-template-processor.js","../node_modules/lit-html/lib/template-factory.js","../node_modules/lit-html/lib/render.js","../node_modules/lit-html/lit-html.js","../node_modules/lit-html/lib/modify-template.js","../node_modules/lit-html/lib/shady-render.js","../node_modules/lit-element/lib/updating-element.js","../node_modules/lit-element/lib/css-tag.js","../node_modules/lit-element/lit-element.js","../local_modules/audio-utils/audio-utils.js","../local_modules/instrument-control/base-control.js","../local_modules/instrument-control/defs.js","../local_modules/instrument-control/empirikit-control.js","../local_modules/instrument-control/instrument-control.js","../local_modules/instrument-control/dummy-control.js","../local_modules/instrument-control/keyboard-control.js","../local_modules/instrument-control/thingy52-control.js","../local_modules/instrument-control/webmidi-control.js","../local_modules/controller-settings/controller-settings.js","../local_modules/mat-button/mat-button.js","../local_modules/sample-visualizer/sample-visualizer.js","../src/main-app.js"],"sourcesContent":["/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nconst directives = new WeakMap();\n/**\n * Brands a function as a directive factory function so that lit-html will call\n * the function during template rendering, rather than passing as a value.\n *\n * A _directive_ is a function that takes a Part as an argument. It has the\n * signature: `(part: Part) => void`.\n *\n * A directive _factory_ is a function that takes arguments for data and\n * configuration and returns a directive. Users of directive usually refer to\n * the directive factory as the directive. For example, \"The repeat directive\".\n *\n * Usually a template author will invoke a directive factory in their template\n * with relevant arguments, which will then return a directive function.\n *\n * Here's an example of using the `repeat()` directive factory that takes an\n * array and a function to render an item:\n *\n * ```js\n * html`<ul><${repeat(items, (item) => html`<li>${item}</li>`)}</ul>`\n * ```\n *\n * When `repeat` is invoked, it returns a directive function that closes over\n * `items` and the template function. When the outer template is rendered, the\n * return directive function is called with the Part for the expression.\n * `repeat` then performs it's custom logic to render multiple items.\n *\n * @param f The directive factory function. Must be a function that returns a\n * function of the signature `(part: Part) => void`. The returned function will\n * be called with the part object.\n *\n * @example\n *\n * import {directive, html} from 'lit-html';\n *\n * const immutable = directive((v) => (part) => {\n *   if (part.value !== v) {\n *     part.setValue(v)\n *   }\n * });\n */\nexport const directive = (f) => ((...args) => {\n    const d = f(...args);\n    directives.set(d, true);\n    return d;\n});\nexport const isDirective = (o) => {\n    return typeof o === 'function' && directives.has(o);\n};\n//# sourceMappingURL=directive.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * True if the custom elements polyfill is in use.\n */\nexport const isCEPolyfill = window.customElements !== undefined &&\n    window.customElements.polyfillWrapFlushCallback !==\n        undefined;\n/**\n * Reparents nodes, starting from `start` (inclusive) to `end` (exclusive),\n * into another container (could be the same container), before `before`. If\n * `before` is null, it appends the nodes to the container.\n */\nexport const reparentNodes = (container, start, end = null, before = null) => {\n    while (start !== end) {\n        const n = start.nextSibling;\n        container.insertBefore(start, before);\n        start = n;\n    }\n};\n/**\n * Removes nodes, starting from `start` (inclusive) to `end` (exclusive), from\n * `container`.\n */\nexport const removeNodes = (container, start, end = null) => {\n    while (start !== end) {\n        const n = start.nextSibling;\n        container.removeChild(start);\n        start = n;\n    }\n};\n//# sourceMappingURL=dom.js.map","/**\n * @license\n * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * A sentinel value that signals that a value was handled by a directive and\n * should not be written to the DOM.\n */\nexport const noChange = {};\n/**\n * A sentinel value that signals a NodePart to fully clear its content.\n */\nexport const nothing = {};\n//# sourceMappingURL=part.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * An expression marker with embedded unique key to avoid collision with\n * possible text in templates.\n */\nexport const marker = `{{lit-${String(Math.random()).slice(2)}}}`;\n/**\n * An expression marker used text-positions, multi-binding attributes, and\n * attributes with markup-like text values.\n */\nexport const nodeMarker = `<!--${marker}-->`;\nexport const markerRegex = new RegExp(`${marker}|${nodeMarker}`);\n/**\n * Suffix appended to all bound attribute names.\n */\nexport const boundAttributeSuffix = '$lit$';\n/**\n * An updateable Template that tracks the location of dynamic parts.\n */\nexport class Template {\n    constructor(result, element) {\n        this.parts = [];\n        this.element = element;\n        const nodesToRemove = [];\n        const stack = [];\n        // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be null\n        const walker = document.createTreeWalker(element.content, 133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */, null, false);\n        // Keeps track of the last index associated with a part. We try to delete\n        // unnecessary nodes, but we never want to associate two different parts\n        // to the same index. They must have a constant node between.\n        let lastPartIndex = 0;\n        let index = -1;\n        let partIndex = 0;\n        const { strings, values: { length } } = result;\n        while (partIndex < length) {\n            const node = walker.nextNode();\n            if (node === null) {\n                // We've exhausted the content inside a nested template element.\n                // Because we still have parts (the outer for-loop), we know:\n                // - There is a template in the stack\n                // - The walker will find a nextNode outside the template\n                walker.currentNode = stack.pop();\n                continue;\n            }\n            index++;\n            if (node.nodeType === 1 /* Node.ELEMENT_NODE */) {\n                if (node.hasAttributes()) {\n                    const attributes = node.attributes;\n                    const { length } = attributes;\n                    // Per\n                    // https://developer.mozilla.org/en-US/docs/Web/API/NamedNodeMap,\n                    // attributes are not guaranteed to be returned in document order.\n                    // In particular, Edge/IE can return them out of order, so we cannot\n                    // assume a correspondence between part index and attribute index.\n                    let count = 0;\n                    for (let i = 0; i < length; i++) {\n                        if (endsWith(attributes[i].name, boundAttributeSuffix)) {\n                            count++;\n                        }\n                    }\n                    while (count-- > 0) {\n                        // Get the template literal section leading up to the first\n                        // expression in this attribute\n                        const stringForPart = strings[partIndex];\n                        // Find the attribute name\n                        const name = lastAttributeNameRegex.exec(stringForPart)[2];\n                        // Find the corresponding attribute\n                        // All bound attributes have had a suffix added in\n                        // TemplateResult#getHTML to opt out of special attribute\n                        // handling. To look up the attribute value we also need to add\n                        // the suffix.\n                        const attributeLookupName = name.toLowerCase() + boundAttributeSuffix;\n                        const attributeValue = node.getAttribute(attributeLookupName);\n                        node.removeAttribute(attributeLookupName);\n                        const statics = attributeValue.split(markerRegex);\n                        this.parts.push({ type: 'attribute', index, name, strings: statics });\n                        partIndex += statics.length - 1;\n                    }\n                }\n                if (node.tagName === 'TEMPLATE') {\n                    stack.push(node);\n                    walker.currentNode = node.content;\n                }\n            }\n            else if (node.nodeType === 3 /* Node.TEXT_NODE */) {\n                const data = node.data;\n                if (data.indexOf(marker) >= 0) {\n                    const parent = node.parentNode;\n                    const strings = data.split(markerRegex);\n                    const lastIndex = strings.length - 1;\n                    // Generate a new text node for each literal section\n                    // These nodes are also used as the markers for node parts\n                    for (let i = 0; i < lastIndex; i++) {\n                        let insert;\n                        let s = strings[i];\n                        if (s === '') {\n                            insert = createMarker();\n                        }\n                        else {\n                            const match = lastAttributeNameRegex.exec(s);\n                            if (match !== null && endsWith(match[2], boundAttributeSuffix)) {\n                                s = s.slice(0, match.index) + match[1] +\n                                    match[2].slice(0, -boundAttributeSuffix.length) + match[3];\n                            }\n                            insert = document.createTextNode(s);\n                        }\n                        parent.insertBefore(insert, node);\n                        this.parts.push({ type: 'node', index: ++index });\n                    }\n                    // If there's no text, we must insert a comment to mark our place.\n                    // Else, we can trust it will stick around after cloning.\n                    if (strings[lastIndex] === '') {\n                        parent.insertBefore(createMarker(), node);\n                        nodesToRemove.push(node);\n                    }\n                    else {\n                        node.data = strings[lastIndex];\n                    }\n                    // We have a part for each match found\n                    partIndex += lastIndex;\n                }\n            }\n            else if (node.nodeType === 8 /* Node.COMMENT_NODE */) {\n                if (node.data === marker) {\n                    const parent = node.parentNode;\n                    // Add a new marker node to be the startNode of the Part if any of\n                    // the following are true:\n                    //  * We don't have a previousSibling\n                    //  * The previousSibling is already the start of a previous part\n                    if (node.previousSibling === null || index === lastPartIndex) {\n                        index++;\n                        parent.insertBefore(createMarker(), node);\n                    }\n                    lastPartIndex = index;\n                    this.parts.push({ type: 'node', index });\n                    // If we don't have a nextSibling, keep this node so we have an end.\n                    // Else, we can remove it to save future costs.\n                    if (node.nextSibling === null) {\n                        node.data = '';\n                    }\n                    else {\n                        nodesToRemove.push(node);\n                        index--;\n                    }\n                    partIndex++;\n                }\n                else {\n                    let i = -1;\n                    while ((i = node.data.indexOf(marker, i + 1)) !== -1) {\n                        // Comment node has a binding marker inside, make an inactive part\n                        // The binding won't work, but subsequent bindings will\n                        // TODO (justinfagnani): consider whether it's even worth it to\n                        // make bindings in comments work\n                        this.parts.push({ type: 'node', index: -1 });\n                        partIndex++;\n                    }\n                }\n            }\n        }\n        // Remove text binding nodes after the walk to not disturb the TreeWalker\n        for (const n of nodesToRemove) {\n            n.parentNode.removeChild(n);\n        }\n    }\n}\nconst endsWith = (str, suffix) => {\n    const index = str.length - suffix.length;\n    return index >= 0 && str.slice(index) === suffix;\n};\nexport const isTemplatePartActive = (part) => part.index !== -1;\n// Allows `document.createComment('')` to be renamed for a\n// small manual size-savings.\nexport const createMarker = () => document.createComment('');\n/**\n * This regex extracts the attribute name preceding an attribute-position\n * expression. It does this by matching the syntax allowed for attributes\n * against the string literal directly preceding the expression, assuming that\n * the expression is in an attribute-value position.\n *\n * See attributes in the HTML spec:\n * https://www.w3.org/TR/html5/syntax.html#elements-attributes\n *\n * \" \\x09\\x0a\\x0c\\x0d\" are HTML space characters:\n * https://www.w3.org/TR/html5/infrastructure.html#space-characters\n *\n * \"\\0-\\x1F\\x7F-\\x9F\" are Unicode control characters, which includes every\n * space character except \" \".\n *\n * So an attribute is:\n *  * The name: any character except a control character, space character, ('),\n *    (\"), \">\", \"=\", or \"/\"\n *  * Followed by zero or more space characters\n *  * Followed by \"=\"\n *  * Followed by zero or more space characters\n *  * Followed by:\n *    * Any character except space, ('), (\"), \"<\", \">\", \"=\", (`), or\n *    * (\") then any non-(\"), or\n *    * (') then any non-(')\n */\nexport const lastAttributeNameRegex = /([ \\x09\\x0a\\x0c\\x0d])([^\\0-\\x1F\\x7F-\\x9F \"'>=/]+)([ \\x09\\x0a\\x0c\\x0d]*=[ \\x09\\x0a\\x0c\\x0d]*(?:[^ \\x09\\x0a\\x0c\\x0d\"'`<>=]*|\"[^\"]*|'[^']*))$/;\n//# sourceMappingURL=template.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module lit-html\n */\nimport { isCEPolyfill } from './dom.js';\nimport { isTemplatePartActive } from './template.js';\n/**\n * An instance of a `Template` that can be attached to the DOM and updated\n * with new values.\n */\nexport class TemplateInstance {\n    constructor(template, processor, options) {\n        this.__parts = [];\n        this.template = template;\n        this.processor = processor;\n        this.options = options;\n    }\n    update(values) {\n        let i = 0;\n        for (const part of this.__parts) {\n            if (part !== undefined) {\n                part.setValue(values[i]);\n            }\n            i++;\n        }\n        for (const part of this.__parts) {\n            if (part !== undefined) {\n                part.commit();\n            }\n        }\n    }\n    _clone() {\n        // There are a number of steps in the lifecycle of a template instance's\n        // DOM fragment:\n        //  1. Clone - create the instance fragment\n        //  2. Adopt - adopt into the main document\n        //  3. Process - find part markers and create parts\n        //  4. Upgrade - upgrade custom elements\n        //  5. Update - set node, attribute, property, etc., values\n        //  6. Connect - connect to the document. Optional and outside of this\n        //     method.\n        //\n        // We have a few constraints on the ordering of these steps:\n        //  * We need to upgrade before updating, so that property values will pass\n        //    through any property setters.\n        //  * We would like to process before upgrading so that we're sure that the\n        //    cloned fragment is inert and not disturbed by self-modifying DOM.\n        //  * We want custom elements to upgrade even in disconnected fragments.\n        //\n        // Given these constraints, with full custom elements support we would\n        // prefer the order: Clone, Process, Adopt, Upgrade, Update, Connect\n        //\n        // But Safari dooes not implement CustomElementRegistry#upgrade, so we\n        // can not implement that order and still have upgrade-before-update and\n        // upgrade disconnected fragments. So we instead sacrifice the\n        // process-before-upgrade constraint, since in Custom Elements v1 elements\n        // must not modify their light DOM in the constructor. We still have issues\n        // when co-existing with CEv0 elements like Polymer 1, and with polyfills\n        // that don't strictly adhere to the no-modification rule because shadow\n        // DOM, which may be created in the constructor, is emulated by being placed\n        // in the light DOM.\n        //\n        // The resulting order is on native is: Clone, Adopt, Upgrade, Process,\n        // Update, Connect. document.importNode() performs Clone, Adopt, and Upgrade\n        // in one step.\n        //\n        // The Custom Elements v1 polyfill supports upgrade(), so the order when\n        // polyfilled is the more ideal: Clone, Process, Adopt, Upgrade, Update,\n        // Connect.\n        const fragment = isCEPolyfill ?\n            this.template.element.content.cloneNode(true) :\n            document.importNode(this.template.element.content, true);\n        const stack = [];\n        const parts = this.template.parts;\n        // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be null\n        const walker = document.createTreeWalker(fragment, 133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */, null, false);\n        let partIndex = 0;\n        let nodeIndex = 0;\n        let part;\n        let node = walker.nextNode();\n        // Loop through all the nodes and parts of a template\n        while (partIndex < parts.length) {\n            part = parts[partIndex];\n            if (!isTemplatePartActive(part)) {\n                this.__parts.push(undefined);\n                partIndex++;\n                continue;\n            }\n            // Progress the tree walker until we find our next part's node.\n            // Note that multiple parts may share the same node (attribute parts\n            // on a single element), so this loop may not run at all.\n            while (nodeIndex < part.index) {\n                nodeIndex++;\n                if (node.nodeName === 'TEMPLATE') {\n                    stack.push(node);\n                    walker.currentNode = node.content;\n                }\n                if ((node = walker.nextNode()) === null) {\n                    // We've exhausted the content inside a nested template element.\n                    // Because we still have parts (the outer for-loop), we know:\n                    // - There is a template in the stack\n                    // - The walker will find a nextNode outside the template\n                    walker.currentNode = stack.pop();\n                    node = walker.nextNode();\n                }\n            }\n            // We've arrived at our part's node.\n            if (part.type === 'node') {\n                const part = this.processor.handleTextExpression(this.options);\n                part.insertAfterNode(node.previousSibling);\n                this.__parts.push(part);\n            }\n            else {\n                this.__parts.push(...this.processor.handleAttributeExpressions(node, part.name, part.strings, this.options));\n            }\n            partIndex++;\n        }\n        if (isCEPolyfill) {\n            document.adoptNode(fragment);\n            customElements.upgrade(fragment);\n        }\n        return fragment;\n    }\n}\n//# sourceMappingURL=template-instance.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module lit-html\n */\nimport { reparentNodes } from './dom.js';\nimport { boundAttributeSuffix, lastAttributeNameRegex, marker, nodeMarker } from './template.js';\nconst commentMarker = ` ${marker} `;\n/**\n * The return type of `html`, which holds a Template and the values from\n * interpolated expressions.\n */\nexport class TemplateResult {\n    constructor(strings, values, type, processor) {\n        this.strings = strings;\n        this.values = values;\n        this.type = type;\n        this.processor = processor;\n    }\n    /**\n     * Returns a string of HTML used to create a `<template>` element.\n     */\n    getHTML() {\n        const l = this.strings.length - 1;\n        let html = '';\n        let isCommentBinding = false;\n        for (let i = 0; i < l; i++) {\n            const s = this.strings[i];\n            // For each binding we want to determine the kind of marker to insert\n            // into the template source before it's parsed by the browser's HTML\n            // parser. The marker type is based on whether the expression is in an\n            // attribute, text, or comment poisition.\n            //   * For node-position bindings we insert a comment with the marker\n            //     sentinel as its text content, like <!--{{lit-guid}}-->.\n            //   * For attribute bindings we insert just the marker sentinel for the\n            //     first binding, so that we support unquoted attribute bindings.\n            //     Subsequent bindings can use a comment marker because multi-binding\n            //     attributes must be quoted.\n            //   * For comment bindings we insert just the marker sentinel so we don't\n            //     close the comment.\n            //\n            // The following code scans the template source, but is *not* an HTML\n            // parser. We don't need to track the tree structure of the HTML, only\n            // whether a binding is inside a comment, and if not, if it appears to be\n            // the first binding in an attribute.\n            const commentOpen = s.lastIndexOf('<!--');\n            // We're in comment position if we have a comment open with no following\n            // comment close. Because <-- can appear in an attribute value there can\n            // be false positives.\n            isCommentBinding = (commentOpen > -1 || isCommentBinding) &&\n                s.indexOf('-->', commentOpen + 1) === -1;\n            // Check to see if we have an attribute-like sequence preceeding the\n            // expression. This can match \"name=value\" like structures in text,\n            // comments, and attribute values, so there can be false-positives.\n            const attributeMatch = lastAttributeNameRegex.exec(s);\n            if (attributeMatch === null) {\n                // We're only in this branch if we don't have a attribute-like\n                // preceeding sequence. For comments, this guards against unusual\n                // attribute values like <div foo=\"<!--${'bar'}\">. Cases like\n                // <!-- foo=${'bar'}--> are handled correctly in the attribute branch\n                // below.\n                html += s + (isCommentBinding ? commentMarker : nodeMarker);\n            }\n            else {\n                // For attributes we use just a marker sentinel, and also append a\n                // $lit$ suffix to the name to opt-out of attribute-specific parsing\n                // that IE and Edge do for style and certain SVG attributes.\n                html += s.substr(0, attributeMatch.index) + attributeMatch[1] +\n                    attributeMatch[2] + boundAttributeSuffix + attributeMatch[3] +\n                    marker;\n            }\n        }\n        html += this.strings[l];\n        return html;\n    }\n    getTemplateElement() {\n        const template = document.createElement('template');\n        template.innerHTML = this.getHTML();\n        return template;\n    }\n}\n/**\n * A TemplateResult for SVG fragments.\n *\n * This class wraps HTML in an `<svg>` tag in order to parse its contents in the\n * SVG namespace, then modifies the template to remove the `<svg>` tag so that\n * clones only container the original fragment.\n */\nexport class SVGTemplateResult extends TemplateResult {\n    getHTML() {\n        return `<svg>${super.getHTML()}</svg>`;\n    }\n    getTemplateElement() {\n        const template = super.getTemplateElement();\n        const content = template.content;\n        const svgElement = content.firstChild;\n        content.removeChild(svgElement);\n        reparentNodes(content, svgElement.firstChild);\n        return template;\n    }\n}\n//# sourceMappingURL=template-result.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module lit-html\n */\nimport { isDirective } from './directive.js';\nimport { removeNodes } from './dom.js';\nimport { noChange, nothing } from './part.js';\nimport { TemplateInstance } from './template-instance.js';\nimport { TemplateResult } from './template-result.js';\nimport { createMarker } from './template.js';\nexport const isPrimitive = (value) => {\n    return (value === null ||\n        !(typeof value === 'object' || typeof value === 'function'));\n};\nexport const isIterable = (value) => {\n    return Array.isArray(value) ||\n        // tslint:disable-next-line:no-any\n        !!(value && value[Symbol.iterator]);\n};\n/**\n * Writes attribute values to the DOM for a group of AttributeParts bound to a\n * single attibute. The value is only set once even if there are multiple parts\n * for an attribute.\n */\nexport class AttributeCommitter {\n    constructor(element, name, strings) {\n        this.dirty = true;\n        this.element = element;\n        this.name = name;\n        this.strings = strings;\n        this.parts = [];\n        for (let i = 0; i < strings.length - 1; i++) {\n            this.parts[i] = this._createPart();\n        }\n    }\n    /**\n     * Creates a single part. Override this to create a differnt type of part.\n     */\n    _createPart() {\n        return new AttributePart(this);\n    }\n    _getValue() {\n        const strings = this.strings;\n        const l = strings.length - 1;\n        let text = '';\n        for (let i = 0; i < l; i++) {\n            text += strings[i];\n            const part = this.parts[i];\n            if (part !== undefined) {\n                const v = part.value;\n                if (isPrimitive(v) || !isIterable(v)) {\n                    text += typeof v === 'string' ? v : String(v);\n                }\n                else {\n                    for (const t of v) {\n                        text += typeof t === 'string' ? t : String(t);\n                    }\n                }\n            }\n        }\n        text += strings[l];\n        return text;\n    }\n    commit() {\n        if (this.dirty) {\n            this.dirty = false;\n            this.element.setAttribute(this.name, this._getValue());\n        }\n    }\n}\n/**\n * A Part that controls all or part of an attribute value.\n */\nexport class AttributePart {\n    constructor(committer) {\n        this.value = undefined;\n        this.committer = committer;\n    }\n    setValue(value) {\n        if (value !== noChange && (!isPrimitive(value) || value !== this.value)) {\n            this.value = value;\n            // If the value is a not a directive, dirty the committer so that it'll\n            // call setAttribute. If the value is a directive, it'll dirty the\n            // committer if it calls setValue().\n            if (!isDirective(value)) {\n                this.committer.dirty = true;\n            }\n        }\n    }\n    commit() {\n        while (isDirective(this.value)) {\n            const directive = this.value;\n            this.value = noChange;\n            directive(this);\n        }\n        if (this.value === noChange) {\n            return;\n        }\n        this.committer.commit();\n    }\n}\n/**\n * A Part that controls a location within a Node tree. Like a Range, NodePart\n * has start and end locations and can set and update the Nodes between those\n * locations.\n *\n * NodeParts support several value types: primitives, Nodes, TemplateResults,\n * as well as arrays and iterables of those types.\n */\nexport class NodePart {\n    constructor(options) {\n        this.value = undefined;\n        this.__pendingValue = undefined;\n        this.options = options;\n    }\n    /**\n     * Appends this part into a container.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    appendInto(container) {\n        this.startNode = container.appendChild(createMarker());\n        this.endNode = container.appendChild(createMarker());\n    }\n    /**\n     * Inserts this part after the `ref` node (between `ref` and `ref`'s next\n     * sibling). Both `ref` and its next sibling must be static, unchanging nodes\n     * such as those that appear in a literal section of a template.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    insertAfterNode(ref) {\n        this.startNode = ref;\n        this.endNode = ref.nextSibling;\n    }\n    /**\n     * Appends this part into a parent part.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    appendIntoPart(part) {\n        part.__insert(this.startNode = createMarker());\n        part.__insert(this.endNode = createMarker());\n    }\n    /**\n     * Inserts this part after the `ref` part.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    insertAfterPart(ref) {\n        ref.__insert(this.startNode = createMarker());\n        this.endNode = ref.endNode;\n        ref.endNode = this.startNode;\n    }\n    setValue(value) {\n        this.__pendingValue = value;\n    }\n    commit() {\n        while (isDirective(this.__pendingValue)) {\n            const directive = this.__pendingValue;\n            this.__pendingValue = noChange;\n            directive(this);\n        }\n        const value = this.__pendingValue;\n        if (value === noChange) {\n            return;\n        }\n        if (isPrimitive(value)) {\n            if (value !== this.value) {\n                this.__commitText(value);\n            }\n        }\n        else if (value instanceof TemplateResult) {\n            this.__commitTemplateResult(value);\n        }\n        else if (value instanceof Node) {\n            this.__commitNode(value);\n        }\n        else if (isIterable(value)) {\n            this.__commitIterable(value);\n        }\n        else if (value === nothing) {\n            this.value = nothing;\n            this.clear();\n        }\n        else {\n            // Fallback, will render the string representation\n            this.__commitText(value);\n        }\n    }\n    __insert(node) {\n        this.endNode.parentNode.insertBefore(node, this.endNode);\n    }\n    __commitNode(value) {\n        if (this.value === value) {\n            return;\n        }\n        this.clear();\n        this.__insert(value);\n        this.value = value;\n    }\n    __commitText(value) {\n        const node = this.startNode.nextSibling;\n        value = value == null ? '' : value;\n        // If `value` isn't already a string, we explicitly convert it here in case\n        // it can't be implicitly converted - i.e. it's a symbol.\n        const valueAsString = typeof value === 'string' ? value : String(value);\n        if (node === this.endNode.previousSibling &&\n            node.nodeType === 3 /* Node.TEXT_NODE */) {\n            // If we only have a single text node between the markers, we can just\n            // set its value, rather than replacing it.\n            // TODO(justinfagnani): Can we just check if this.value is primitive?\n            node.data = valueAsString;\n        }\n        else {\n            this.__commitNode(document.createTextNode(valueAsString));\n        }\n        this.value = value;\n    }\n    __commitTemplateResult(value) {\n        const template = this.options.templateFactory(value);\n        if (this.value instanceof TemplateInstance &&\n            this.value.template === template) {\n            this.value.update(value.values);\n        }\n        else {\n            // Make sure we propagate the template processor from the TemplateResult\n            // so that we use its syntax extension, etc. The template factory comes\n            // from the render function options so that it can control template\n            // caching and preprocessing.\n            const instance = new TemplateInstance(template, value.processor, this.options);\n            const fragment = instance._clone();\n            instance.update(value.values);\n            this.__commitNode(fragment);\n            this.value = instance;\n        }\n    }\n    __commitIterable(value) {\n        // For an Iterable, we create a new InstancePart per item, then set its\n        // value to the item. This is a little bit of overhead for every item in\n        // an Iterable, but it lets us recurse easily and efficiently update Arrays\n        // of TemplateResults that will be commonly returned from expressions like:\n        // array.map((i) => html`${i}`), by reusing existing TemplateInstances.\n        // If _value is an array, then the previous render was of an\n        // iterable and _value will contain the NodeParts from the previous\n        // render. If _value is not an array, clear this part and make a new\n        // array for NodeParts.\n        if (!Array.isArray(this.value)) {\n            this.value = [];\n            this.clear();\n        }\n        // Lets us keep track of how many items we stamped so we can clear leftover\n        // items from a previous render\n        const itemParts = this.value;\n        let partIndex = 0;\n        let itemPart;\n        for (const item of value) {\n            // Try to reuse an existing part\n            itemPart = itemParts[partIndex];\n            // If no existing part, create a new one\n            if (itemPart === undefined) {\n                itemPart = new NodePart(this.options);\n                itemParts.push(itemPart);\n                if (partIndex === 0) {\n                    itemPart.appendIntoPart(this);\n                }\n                else {\n                    itemPart.insertAfterPart(itemParts[partIndex - 1]);\n                }\n            }\n            itemPart.setValue(item);\n            itemPart.commit();\n            partIndex++;\n        }\n        if (partIndex < itemParts.length) {\n            // Truncate the parts array so _value reflects the current state\n            itemParts.length = partIndex;\n            this.clear(itemPart && itemPart.endNode);\n        }\n    }\n    clear(startNode = this.startNode) {\n        removeNodes(this.startNode.parentNode, startNode.nextSibling, this.endNode);\n    }\n}\n/**\n * Implements a boolean attribute, roughly as defined in the HTML\n * specification.\n *\n * If the value is truthy, then the attribute is present with a value of\n * ''. If the value is falsey, the attribute is removed.\n */\nexport class BooleanAttributePart {\n    constructor(element, name, strings) {\n        this.value = undefined;\n        this.__pendingValue = undefined;\n        if (strings.length !== 2 || strings[0] !== '' || strings[1] !== '') {\n            throw new Error('Boolean attributes can only contain a single expression');\n        }\n        this.element = element;\n        this.name = name;\n        this.strings = strings;\n    }\n    setValue(value) {\n        this.__pendingValue = value;\n    }\n    commit() {\n        while (isDirective(this.__pendingValue)) {\n            const directive = this.__pendingValue;\n            this.__pendingValue = noChange;\n            directive(this);\n        }\n        if (this.__pendingValue === noChange) {\n            return;\n        }\n        const value = !!this.__pendingValue;\n        if (this.value !== value) {\n            if (value) {\n                this.element.setAttribute(this.name, '');\n            }\n            else {\n                this.element.removeAttribute(this.name);\n            }\n            this.value = value;\n        }\n        this.__pendingValue = noChange;\n    }\n}\n/**\n * Sets attribute values for PropertyParts, so that the value is only set once\n * even if there are multiple parts for a property.\n *\n * If an expression controls the whole property value, then the value is simply\n * assigned to the property under control. If there are string literals or\n * multiple expressions, then the strings are expressions are interpolated into\n * a string first.\n */\nexport class PropertyCommitter extends AttributeCommitter {\n    constructor(element, name, strings) {\n        super(element, name, strings);\n        this.single =\n            (strings.length === 2 && strings[0] === '' && strings[1] === '');\n    }\n    _createPart() {\n        return new PropertyPart(this);\n    }\n    _getValue() {\n        if (this.single) {\n            return this.parts[0].value;\n        }\n        return super._getValue();\n    }\n    commit() {\n        if (this.dirty) {\n            this.dirty = false;\n            // tslint:disable-next-line:no-any\n            this.element[this.name] = this._getValue();\n        }\n    }\n}\nexport class PropertyPart extends AttributePart {\n}\n// Detect event listener options support. If the `capture` property is read\n// from the options object, then options are supported. If not, then the thrid\n// argument to add/removeEventListener is interpreted as the boolean capture\n// value so we should only pass the `capture` property.\nlet eventOptionsSupported = false;\ntry {\n    const options = {\n        get capture() {\n            eventOptionsSupported = true;\n            return false;\n        }\n    };\n    // tslint:disable-next-line:no-any\n    window.addEventListener('test', options, options);\n    // tslint:disable-next-line:no-any\n    window.removeEventListener('test', options, options);\n}\ncatch (_e) {\n}\nexport class EventPart {\n    constructor(element, eventName, eventContext) {\n        this.value = undefined;\n        this.__pendingValue = undefined;\n        this.element = element;\n        this.eventName = eventName;\n        this.eventContext = eventContext;\n        this.__boundHandleEvent = (e) => this.handleEvent(e);\n    }\n    setValue(value) {\n        this.__pendingValue = value;\n    }\n    commit() {\n        while (isDirective(this.__pendingValue)) {\n            const directive = this.__pendingValue;\n            this.__pendingValue = noChange;\n            directive(this);\n        }\n        if (this.__pendingValue === noChange) {\n            return;\n        }\n        const newListener = this.__pendingValue;\n        const oldListener = this.value;\n        const shouldRemoveListener = newListener == null ||\n            oldListener != null &&\n                (newListener.capture !== oldListener.capture ||\n                    newListener.once !== oldListener.once ||\n                    newListener.passive !== oldListener.passive);\n        const shouldAddListener = newListener != null && (oldListener == null || shouldRemoveListener);\n        if (shouldRemoveListener) {\n            this.element.removeEventListener(this.eventName, this.__boundHandleEvent, this.__options);\n        }\n        if (shouldAddListener) {\n            this.__options = getOptions(newListener);\n            this.element.addEventListener(this.eventName, this.__boundHandleEvent, this.__options);\n        }\n        this.value = newListener;\n        this.__pendingValue = noChange;\n    }\n    handleEvent(event) {\n        if (typeof this.value === 'function') {\n            this.value.call(this.eventContext || this.element, event);\n        }\n        else {\n            this.value.handleEvent(event);\n        }\n    }\n}\n// We copy options because of the inconsistent behavior of browsers when reading\n// the third argument of add/removeEventListener. IE11 doesn't support options\n// at all. Chrome 41 only reads `capture` if the argument is an object.\nconst getOptions = (o) => o &&\n    (eventOptionsSupported ?\n        { capture: o.capture, passive: o.passive, once: o.once } :\n        o.capture);\n//# sourceMappingURL=parts.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { AttributeCommitter, BooleanAttributePart, EventPart, NodePart, PropertyCommitter } from './parts.js';\n/**\n * Creates Parts when a template is instantiated.\n */\nexport class DefaultTemplateProcessor {\n    /**\n     * Create parts for an attribute-position binding, given the event, attribute\n     * name, and string literals.\n     *\n     * @param element The element containing the binding\n     * @param name  The attribute name\n     * @param strings The string literals. There are always at least two strings,\n     *   event for fully-controlled bindings with a single expression.\n     */\n    handleAttributeExpressions(element, name, strings, options) {\n        const prefix = name[0];\n        if (prefix === '.') {\n            const committer = new PropertyCommitter(element, name.slice(1), strings);\n            return committer.parts;\n        }\n        if (prefix === '@') {\n            return [new EventPart(element, name.slice(1), options.eventContext)];\n        }\n        if (prefix === '?') {\n            return [new BooleanAttributePart(element, name.slice(1), strings)];\n        }\n        const committer = new AttributeCommitter(element, name, strings);\n        return committer.parts;\n    }\n    /**\n     * Create parts for a text-position binding.\n     * @param templateFactory\n     */\n    handleTextExpression(options) {\n        return new NodePart(options);\n    }\n}\nexport const defaultTemplateProcessor = new DefaultTemplateProcessor();\n//# sourceMappingURL=default-template-processor.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { marker, Template } from './template.js';\n/**\n * The default TemplateFactory which caches Templates keyed on\n * result.type and result.strings.\n */\nexport function templateFactory(result) {\n    let templateCache = templateCaches.get(result.type);\n    if (templateCache === undefined) {\n        templateCache = {\n            stringsArray: new WeakMap(),\n            keyString: new Map()\n        };\n        templateCaches.set(result.type, templateCache);\n    }\n    let template = templateCache.stringsArray.get(result.strings);\n    if (template !== undefined) {\n        return template;\n    }\n    // If the TemplateStringsArray is new, generate a key from the strings\n    // This key is shared between all templates with identical content\n    const key = result.strings.join(marker);\n    // Check if we already have a Template for this key\n    template = templateCache.keyString.get(key);\n    if (template === undefined) {\n        // If we have not seen this key before, create a new Template\n        template = new Template(result, result.getTemplateElement());\n        // Cache the Template for this key\n        templateCache.keyString.set(key, template);\n    }\n    // Cache all future queries for this TemplateStringsArray\n    templateCache.stringsArray.set(result.strings, template);\n    return template;\n}\nexport const templateCaches = new Map();\n//# sourceMappingURL=template-factory.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module lit-html\n */\nimport { removeNodes } from './dom.js';\nimport { NodePart } from './parts.js';\nimport { templateFactory } from './template-factory.js';\nexport const parts = new WeakMap();\n/**\n * Renders a template result or other value to a container.\n *\n * To update a container with new values, reevaluate the template literal and\n * call `render` with the new result.\n *\n * @param result Any value renderable by NodePart - typically a TemplateResult\n *     created by evaluating a template tag like `html` or `svg`.\n * @param container A DOM parent to render to. The entire contents are either\n *     replaced, or efficiently updated if the same result type was previous\n *     rendered there.\n * @param options RenderOptions for the entire render tree rendered to this\n *     container. Render options must *not* change between renders to the same\n *     container, as those changes will not effect previously rendered DOM.\n */\nexport const render = (result, container, options) => {\n    let part = parts.get(container);\n    if (part === undefined) {\n        removeNodes(container, container.firstChild);\n        parts.set(container, part = new NodePart(Object.assign({ templateFactory }, options)));\n        part.appendInto(container);\n    }\n    part.setValue(result);\n    part.commit();\n};\n//# sourceMappingURL=render.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n *\n * Main lit-html module.\n *\n * Main exports:\n *\n * -  [[html]]\n * -  [[svg]]\n * -  [[render]]\n *\n * @module lit-html\n * @preferred\n */\n/**\n * Do not remove this comment; it keeps typedoc from misplacing the module\n * docs.\n */\nimport { defaultTemplateProcessor } from './lib/default-template-processor.js';\nimport { SVGTemplateResult, TemplateResult } from './lib/template-result.js';\nexport { DefaultTemplateProcessor, defaultTemplateProcessor } from './lib/default-template-processor.js';\nexport { directive, isDirective } from './lib/directive.js';\n// TODO(justinfagnani): remove line when we get NodePart moving methods\nexport { removeNodes, reparentNodes } from './lib/dom.js';\nexport { noChange, nothing } from './lib/part.js';\nexport { AttributeCommitter, AttributePart, BooleanAttributePart, EventPart, isIterable, isPrimitive, NodePart, PropertyCommitter, PropertyPart } from './lib/parts.js';\nexport { parts, render } from './lib/render.js';\nexport { templateCaches, templateFactory } from './lib/template-factory.js';\nexport { TemplateInstance } from './lib/template-instance.js';\nexport { SVGTemplateResult, TemplateResult } from './lib/template-result.js';\nexport { createMarker, isTemplatePartActive, Template } from './lib/template.js';\n// IMPORTANT: do not change the property name or the assignment expression.\n// This line will be used in regexes to search for lit-html usage.\n// TODO(justinfagnani): inject version number at build time\n(window['litHtmlVersions'] || (window['litHtmlVersions'] = [])).push('1.1.2');\n/**\n * Interprets a template literal as an HTML template that can efficiently\n * render to and update a container.\n */\nexport const html = (strings, ...values) => new TemplateResult(strings, values, 'html', defaultTemplateProcessor);\n/**\n * Interprets a template literal as an SVG template that can efficiently\n * render to and update a container.\n */\nexport const svg = (strings, ...values) => new SVGTemplateResult(strings, values, 'svg', defaultTemplateProcessor);\n//# sourceMappingURL=lit-html.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module shady-render\n */\nimport { isTemplatePartActive } from './template.js';\nconst walkerNodeFilter = 133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */;\n/**\n * Removes the list of nodes from a Template safely. In addition to removing\n * nodes from the Template, the Template part indices are updated to match\n * the mutated Template DOM.\n *\n * As the template is walked the removal state is tracked and\n * part indices are adjusted as needed.\n *\n * div\n *   div#1 (remove) <-- start removing (removing node is div#1)\n *     div\n *       div#2 (remove)  <-- continue removing (removing node is still div#1)\n *         div\n * div <-- stop removing since previous sibling is the removing node (div#1,\n * removed 4 nodes)\n */\nexport function removeNodesFromTemplate(template, nodesToRemove) {\n    const { element: { content }, parts } = template;\n    const walker = document.createTreeWalker(content, walkerNodeFilter, null, false);\n    let partIndex = nextActiveIndexInTemplateParts(parts);\n    let part = parts[partIndex];\n    let nodeIndex = -1;\n    let removeCount = 0;\n    const nodesToRemoveInTemplate = [];\n    let currentRemovingNode = null;\n    while (walker.nextNode()) {\n        nodeIndex++;\n        const node = walker.currentNode;\n        // End removal if stepped past the removing node\n        if (node.previousSibling === currentRemovingNode) {\n            currentRemovingNode = null;\n        }\n        // A node to remove was found in the template\n        if (nodesToRemove.has(node)) {\n            nodesToRemoveInTemplate.push(node);\n            // Track node we're removing\n            if (currentRemovingNode === null) {\n                currentRemovingNode = node;\n            }\n        }\n        // When removing, increment count by which to adjust subsequent part indices\n        if (currentRemovingNode !== null) {\n            removeCount++;\n        }\n        while (part !== undefined && part.index === nodeIndex) {\n            // If part is in a removed node deactivate it by setting index to -1 or\n            // adjust the index as needed.\n            part.index = currentRemovingNode !== null ? -1 : part.index - removeCount;\n            // go to the next active part.\n            partIndex = nextActiveIndexInTemplateParts(parts, partIndex);\n            part = parts[partIndex];\n        }\n    }\n    nodesToRemoveInTemplate.forEach((n) => n.parentNode.removeChild(n));\n}\nconst countNodes = (node) => {\n    let count = (node.nodeType === 11 /* Node.DOCUMENT_FRAGMENT_NODE */) ? 0 : 1;\n    const walker = document.createTreeWalker(node, walkerNodeFilter, null, false);\n    while (walker.nextNode()) {\n        count++;\n    }\n    return count;\n};\nconst nextActiveIndexInTemplateParts = (parts, startIndex = -1) => {\n    for (let i = startIndex + 1; i < parts.length; i++) {\n        const part = parts[i];\n        if (isTemplatePartActive(part)) {\n            return i;\n        }\n    }\n    return -1;\n};\n/**\n * Inserts the given node into the Template, optionally before the given\n * refNode. In addition to inserting the node into the Template, the Template\n * part indices are updated to match the mutated Template DOM.\n */\nexport function insertNodeIntoTemplate(template, node, refNode = null) {\n    const { element: { content }, parts } = template;\n    // If there's no refNode, then put node at end of template.\n    // No part indices need to be shifted in this case.\n    if (refNode === null || refNode === undefined) {\n        content.appendChild(node);\n        return;\n    }\n    const walker = document.createTreeWalker(content, walkerNodeFilter, null, false);\n    let partIndex = nextActiveIndexInTemplateParts(parts);\n    let insertCount = 0;\n    let walkerIndex = -1;\n    while (walker.nextNode()) {\n        walkerIndex++;\n        const walkerNode = walker.currentNode;\n        if (walkerNode === refNode) {\n            insertCount = countNodes(node);\n            refNode.parentNode.insertBefore(node, refNode);\n        }\n        while (partIndex !== -1 && parts[partIndex].index === walkerIndex) {\n            // If we've inserted the node, simply adjust all subsequent parts\n            if (insertCount > 0) {\n                while (partIndex !== -1) {\n                    parts[partIndex].index += insertCount;\n                    partIndex = nextActiveIndexInTemplateParts(parts, partIndex);\n                }\n                return;\n            }\n            partIndex = nextActiveIndexInTemplateParts(parts, partIndex);\n        }\n    }\n}\n//# sourceMappingURL=modify-template.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * Module to add shady DOM/shady CSS polyfill support to lit-html template\n * rendering. See the [[render]] method for details.\n *\n * @module shady-render\n * @preferred\n */\n/**\n * Do not remove this comment; it keeps typedoc from misplacing the module\n * docs.\n */\nimport { removeNodes } from './dom.js';\nimport { insertNodeIntoTemplate, removeNodesFromTemplate } from './modify-template.js';\nimport { parts, render as litRender } from './render.js';\nimport { templateCaches } from './template-factory.js';\nimport { TemplateInstance } from './template-instance.js';\nimport { marker, Template } from './template.js';\nexport { html, svg, TemplateResult } from '../lit-html.js';\n// Get a key to lookup in `templateCaches`.\nconst getTemplateCacheKey = (type, scopeName) => `${type}--${scopeName}`;\nlet compatibleShadyCSSVersion = true;\nif (typeof window.ShadyCSS === 'undefined') {\n    compatibleShadyCSSVersion = false;\n}\nelse if (typeof window.ShadyCSS.prepareTemplateDom === 'undefined') {\n    console.warn(`Incompatible ShadyCSS version detected. ` +\n        `Please update to at least @webcomponents/webcomponentsjs@2.0.2 and ` +\n        `@webcomponents/shadycss@1.3.1.`);\n    compatibleShadyCSSVersion = false;\n}\n/**\n * Template factory which scopes template DOM using ShadyCSS.\n * @param scopeName {string}\n */\nconst shadyTemplateFactory = (scopeName) => (result) => {\n    const cacheKey = getTemplateCacheKey(result.type, scopeName);\n    let templateCache = templateCaches.get(cacheKey);\n    if (templateCache === undefined) {\n        templateCache = {\n            stringsArray: new WeakMap(),\n            keyString: new Map()\n        };\n        templateCaches.set(cacheKey, templateCache);\n    }\n    let template = templateCache.stringsArray.get(result.strings);\n    if (template !== undefined) {\n        return template;\n    }\n    const key = result.strings.join(marker);\n    template = templateCache.keyString.get(key);\n    if (template === undefined) {\n        const element = result.getTemplateElement();\n        if (compatibleShadyCSSVersion) {\n            window.ShadyCSS.prepareTemplateDom(element, scopeName);\n        }\n        template = new Template(result, element);\n        templateCache.keyString.set(key, template);\n    }\n    templateCache.stringsArray.set(result.strings, template);\n    return template;\n};\nconst TEMPLATE_TYPES = ['html', 'svg'];\n/**\n * Removes all style elements from Templates for the given scopeName.\n */\nconst removeStylesFromLitTemplates = (scopeName) => {\n    TEMPLATE_TYPES.forEach((type) => {\n        const templates = templateCaches.get(getTemplateCacheKey(type, scopeName));\n        if (templates !== undefined) {\n            templates.keyString.forEach((template) => {\n                const { element: { content } } = template;\n                // IE 11 doesn't support the iterable param Set constructor\n                const styles = new Set();\n                Array.from(content.querySelectorAll('style')).forEach((s) => {\n                    styles.add(s);\n                });\n                removeNodesFromTemplate(template, styles);\n            });\n        }\n    });\n};\nconst shadyRenderSet = new Set();\n/**\n * For the given scope name, ensures that ShadyCSS style scoping is performed.\n * This is done just once per scope name so the fragment and template cannot\n * be modified.\n * (1) extracts styles from the rendered fragment and hands them to ShadyCSS\n * to be scoped and appended to the document\n * (2) removes style elements from all lit-html Templates for this scope name.\n *\n * Note, <style> elements can only be placed into templates for the\n * initial rendering of the scope. If <style> elements are included in templates\n * dynamically rendered to the scope (after the first scope render), they will\n * not be scoped and the <style> will be left in the template and rendered\n * output.\n */\nconst prepareTemplateStyles = (scopeName, renderedDOM, template) => {\n    shadyRenderSet.add(scopeName);\n    // If `renderedDOM` is stamped from a Template, then we need to edit that\n    // Template's underlying template element. Otherwise, we create one here\n    // to give to ShadyCSS, which still requires one while scoping.\n    const templateElement = !!template ? template.element : document.createElement('template');\n    // Move styles out of rendered DOM and store.\n    const styles = renderedDOM.querySelectorAll('style');\n    const { length } = styles;\n    // If there are no styles, skip unnecessary work\n    if (length === 0) {\n        // Ensure prepareTemplateStyles is called to support adding\n        // styles via `prepareAdoptedCssText` since that requires that\n        // `prepareTemplateStyles` is called.\n        //\n        // ShadyCSS will only update styles containing @apply in the template\n        // given to `prepareTemplateStyles`. If no lit Template was given,\n        // ShadyCSS will not be able to update uses of @apply in any relevant\n        // template. However, this is not a problem because we only create the\n        // template for the purpose of supporting `prepareAdoptedCssText`,\n        // which doesn't support @apply at all.\n        window.ShadyCSS.prepareTemplateStyles(templateElement, scopeName);\n        return;\n    }\n    const condensedStyle = document.createElement('style');\n    // Collect styles into a single style. This helps us make sure ShadyCSS\n    // manipulations will not prevent us from being able to fix up template\n    // part indices.\n    // NOTE: collecting styles is inefficient for browsers but ShadyCSS\n    // currently does this anyway. When it does not, this should be changed.\n    for (let i = 0; i < length; i++) {\n        const style = styles[i];\n        style.parentNode.removeChild(style);\n        condensedStyle.textContent += style.textContent;\n    }\n    // Remove styles from nested templates in this scope.\n    removeStylesFromLitTemplates(scopeName);\n    // And then put the condensed style into the \"root\" template passed in as\n    // `template`.\n    const content = templateElement.content;\n    if (!!template) {\n        insertNodeIntoTemplate(template, condensedStyle, content.firstChild);\n    }\n    else {\n        content.insertBefore(condensedStyle, content.firstChild);\n    }\n    // Note, it's important that ShadyCSS gets the template that `lit-html`\n    // will actually render so that it can update the style inside when\n    // needed (e.g. @apply native Shadow DOM case).\n    window.ShadyCSS.prepareTemplateStyles(templateElement, scopeName);\n    const style = content.querySelector('style');\n    if (window.ShadyCSS.nativeShadow && style !== null) {\n        // When in native Shadow DOM, ensure the style created by ShadyCSS is\n        // included in initially rendered output (`renderedDOM`).\n        renderedDOM.insertBefore(style.cloneNode(true), renderedDOM.firstChild);\n    }\n    else if (!!template) {\n        // When no style is left in the template, parts will be broken as a\n        // result. To fix this, we put back the style node ShadyCSS removed\n        // and then tell lit to remove that node from the template.\n        // There can be no style in the template in 2 cases (1) when Shady DOM\n        // is in use, ShadyCSS removes all styles, (2) when native Shadow DOM\n        // is in use ShadyCSS removes the style if it contains no content.\n        // NOTE, ShadyCSS creates its own style so we can safely add/remove\n        // `condensedStyle` here.\n        content.insertBefore(condensedStyle, content.firstChild);\n        const removes = new Set();\n        removes.add(condensedStyle);\n        removeNodesFromTemplate(template, removes);\n    }\n};\n/**\n * Extension to the standard `render` method which supports rendering\n * to ShadowRoots when the ShadyDOM (https://github.com/webcomponents/shadydom)\n * and ShadyCSS (https://github.com/webcomponents/shadycss) polyfills are used\n * or when the webcomponentsjs\n * (https://github.com/webcomponents/webcomponentsjs) polyfill is used.\n *\n * Adds a `scopeName` option which is used to scope element DOM and stylesheets\n * when native ShadowDOM is unavailable. The `scopeName` will be added to\n * the class attribute of all rendered DOM. In addition, any style elements will\n * be automatically re-written with this `scopeName` selector and moved out\n * of the rendered DOM and into the document `<head>`.\n *\n * It is common to use this render method in conjunction with a custom element\n * which renders a shadowRoot. When this is done, typically the element's\n * `localName` should be used as the `scopeName`.\n *\n * In addition to DOM scoping, ShadyCSS also supports a basic shim for css\n * custom properties (needed only on older browsers like IE11) and a shim for\n * a deprecated feature called `@apply` that supports applying a set of css\n * custom properties to a given location.\n *\n * Usage considerations:\n *\n * * Part values in `<style>` elements are only applied the first time a given\n * `scopeName` renders. Subsequent changes to parts in style elements will have\n * no effect. Because of this, parts in style elements should only be used for\n * values that will never change, for example parts that set scope-wide theme\n * values or parts which render shared style elements.\n *\n * * Note, due to a limitation of the ShadyDOM polyfill, rendering in a\n * custom element's `constructor` is not supported. Instead rendering should\n * either done asynchronously, for example at microtask timing (for example\n * `Promise.resolve()`), or be deferred until the first time the element's\n * `connectedCallback` runs.\n *\n * Usage considerations when using shimmed custom properties or `@apply`:\n *\n * * Whenever any dynamic changes are made which affect\n * css custom properties, `ShadyCSS.styleElement(element)` must be called\n * to update the element. There are two cases when this is needed:\n * (1) the element is connected to a new parent, (2) a class is added to the\n * element that causes it to match different custom properties.\n * To address the first case when rendering a custom element, `styleElement`\n * should be called in the element's `connectedCallback`.\n *\n * * Shimmed custom properties may only be defined either for an entire\n * shadowRoot (for example, in a `:host` rule) or via a rule that directly\n * matches an element with a shadowRoot. In other words, instead of flowing from\n * parent to child as do native css custom properties, shimmed custom properties\n * flow only from shadowRoots to nested shadowRoots.\n *\n * * When using `@apply` mixing css shorthand property names with\n * non-shorthand names (for example `border` and `border-width`) is not\n * supported.\n */\nexport const render = (result, container, options) => {\n    if (!options || typeof options !== 'object' || !options.scopeName) {\n        throw new Error('The `scopeName` option is required.');\n    }\n    const scopeName = options.scopeName;\n    const hasRendered = parts.has(container);\n    const needsScoping = compatibleShadyCSSVersion &&\n        container.nodeType === 11 /* Node.DOCUMENT_FRAGMENT_NODE */ &&\n        !!container.host;\n    // Handle first render to a scope specially...\n    const firstScopeRender = needsScoping && !shadyRenderSet.has(scopeName);\n    // On first scope render, render into a fragment; this cannot be a single\n    // fragment that is reused since nested renders can occur synchronously.\n    const renderContainer = firstScopeRender ? document.createDocumentFragment() : container;\n    litRender(result, renderContainer, Object.assign({ templateFactory: shadyTemplateFactory(scopeName) }, options));\n    // When performing first scope render,\n    // (1) We've rendered into a fragment so that there's a chance to\n    // `prepareTemplateStyles` before sub-elements hit the DOM\n    // (which might cause them to render based on a common pattern of\n    // rendering in a custom element's `connectedCallback`);\n    // (2) Scope the template with ShadyCSS one time only for this scope.\n    // (3) Render the fragment into the container and make sure the\n    // container knows its `part` is the one we just rendered. This ensures\n    // DOM will be re-used on subsequent renders.\n    if (firstScopeRender) {\n        const part = parts.get(renderContainer);\n        parts.delete(renderContainer);\n        // ShadyCSS might have style sheets (e.g. from `prepareAdoptedCssText`)\n        // that should apply to `renderContainer` even if the rendered value is\n        // not a TemplateInstance. However, it will only insert scoped styles\n        // into the document if `prepareTemplateStyles` has already been called\n        // for the given scope name.\n        const template = part.value instanceof TemplateInstance ?\n            part.value.template :\n            undefined;\n        prepareTemplateStyles(scopeName, renderContainer, template);\n        removeNodes(container, container.firstChild);\n        container.appendChild(renderContainer);\n        parts.set(container, part);\n    }\n    // After elements have hit the DOM, update styling if this is the\n    // initial render to this container.\n    // This is needed whenever dynamic changes are made so it would be\n    // safest to do every render; however, this would regress performance\n    // so we leave it up to the user to call `ShadyCSS.styleElement`\n    // for dynamic changes.\n    if (!hasRendered && needsScoping) {\n        window.ShadyCSS.styleElement(container.host);\n    }\n};\n//# sourceMappingURL=shady-render.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nvar _a;\n/**\n * When using Closure Compiler, JSCompiler_renameProperty(property, object) is\n * replaced at compile time by the munged name for object[property]. We cannot\n * alias this function, so we have to use a small shim that has the same\n * behavior when not compiling.\n */\nwindow.JSCompiler_renameProperty =\n    (prop, _obj) => prop;\nexport const defaultConverter = {\n    toAttribute(value, type) {\n        switch (type) {\n            case Boolean:\n                return value ? '' : null;\n            case Object:\n            case Array:\n                // if the value is `null` or `undefined` pass this through\n                // to allow removing/no change behavior.\n                return value == null ? value : JSON.stringify(value);\n        }\n        return value;\n    },\n    fromAttribute(value, type) {\n        switch (type) {\n            case Boolean:\n                return value !== null;\n            case Number:\n                return value === null ? null : Number(value);\n            case Object:\n            case Array:\n                return JSON.parse(value);\n        }\n        return value;\n    }\n};\n/**\n * Change function that returns true if `value` is different from `oldValue`.\n * This method is used as the default for a property's `hasChanged` function.\n */\nexport const notEqual = (value, old) => {\n    // This ensures (old==NaN, value==NaN) always returns false\n    return old !== value && (old === old || value === value);\n};\nconst defaultPropertyDeclaration = {\n    attribute: true,\n    type: String,\n    converter: defaultConverter,\n    reflect: false,\n    hasChanged: notEqual\n};\nconst microtaskPromise = Promise.resolve(true);\nconst STATE_HAS_UPDATED = 1;\nconst STATE_UPDATE_REQUESTED = 1 << 2;\nconst STATE_IS_REFLECTING_TO_ATTRIBUTE = 1 << 3;\nconst STATE_IS_REFLECTING_TO_PROPERTY = 1 << 4;\nconst STATE_HAS_CONNECTED = 1 << 5;\n/**\n * The Closure JS Compiler doesn't currently have good support for static\n * property semantics where \"this\" is dynamic (e.g.\n * https://github.com/google/closure-compiler/issues/3177 and others) so we use\n * this hack to bypass any rewriting by the compiler.\n */\nconst finalized = 'finalized';\n/**\n * Base element class which manages element properties and attributes. When\n * properties change, the `update` method is asynchronously called. This method\n * should be supplied by subclassers to render updates as desired.\n */\nexport class UpdatingElement extends HTMLElement {\n    constructor() {\n        super();\n        this._updateState = 0;\n        this._instanceProperties = undefined;\n        this._updatePromise = microtaskPromise;\n        this._hasConnectedResolver = undefined;\n        /**\n         * Map with keys for any properties that have changed since the last\n         * update cycle with previous values.\n         */\n        this._changedProperties = new Map();\n        /**\n         * Map with keys of properties that should be reflected when updated.\n         */\n        this._reflectingProperties = undefined;\n        this.initialize();\n    }\n    /**\n     * Returns a list of attributes corresponding to the registered properties.\n     * @nocollapse\n     */\n    static get observedAttributes() {\n        // note: piggy backing on this to ensure we're finalized.\n        this.finalize();\n        const attributes = [];\n        // Use forEach so this works even if for/of loops are compiled to for loops\n        // expecting arrays\n        this._classProperties.forEach((v, p) => {\n            const attr = this._attributeNameForProperty(p, v);\n            if (attr !== undefined) {\n                this._attributeToPropertyMap.set(attr, p);\n                attributes.push(attr);\n            }\n        });\n        return attributes;\n    }\n    /**\n     * Ensures the private `_classProperties` property metadata is created.\n     * In addition to `finalize` this is also called in `createProperty` to\n     * ensure the `@property` decorator can add property metadata.\n     */\n    /** @nocollapse */\n    static _ensureClassProperties() {\n        // ensure private storage for property declarations.\n        if (!this.hasOwnProperty(JSCompiler_renameProperty('_classProperties', this))) {\n            this._classProperties = new Map();\n            // NOTE: Workaround IE11 not supporting Map constructor argument.\n            const superProperties = Object.getPrototypeOf(this)._classProperties;\n            if (superProperties !== undefined) {\n                superProperties.forEach((v, k) => this._classProperties.set(k, v));\n            }\n        }\n    }\n    /**\n     * Creates a property accessor on the element prototype if one does not exist.\n     * The property setter calls the property's `hasChanged` property option\n     * or uses a strict identity check to determine whether or not to request\n     * an update.\n     * @nocollapse\n     */\n    static createProperty(name, options = defaultPropertyDeclaration) {\n        // Note, since this can be called by the `@property` decorator which\n        // is called before `finalize`, we ensure storage exists for property\n        // metadata.\n        this._ensureClassProperties();\n        this._classProperties.set(name, options);\n        // Do not generate an accessor if the prototype already has one, since\n        // it would be lost otherwise and that would never be the user's intention;\n        // Instead, we expect users to call `requestUpdate` themselves from\n        // user-defined accessors. Note that if the super has an accessor we will\n        // still overwrite it\n        if (options.noAccessor || this.prototype.hasOwnProperty(name)) {\n            return;\n        }\n        const key = typeof name === 'symbol' ? Symbol() : `__${name}`;\n        Object.defineProperty(this.prototype, name, {\n            // tslint:disable-next-line:no-any no symbol in index\n            get() {\n                return this[key];\n            },\n            set(value) {\n                const oldValue = this[name];\n                this[key] = value;\n                this._requestUpdate(name, oldValue);\n            },\n            configurable: true,\n            enumerable: true\n        });\n    }\n    /**\n     * Creates property accessors for registered properties and ensures\n     * any superclasses are also finalized.\n     * @nocollapse\n     */\n    static finalize() {\n        // finalize any superclasses\n        const superCtor = Object.getPrototypeOf(this);\n        if (!superCtor.hasOwnProperty(finalized)) {\n            superCtor.finalize();\n        }\n        this[finalized] = true;\n        this._ensureClassProperties();\n        // initialize Map populated in observedAttributes\n        this._attributeToPropertyMap = new Map();\n        // make any properties\n        // Note, only process \"own\" properties since this element will inherit\n        // any properties defined on the superClass, and finalization ensures\n        // the entire prototype chain is finalized.\n        if (this.hasOwnProperty(JSCompiler_renameProperty('properties', this))) {\n            const props = this.properties;\n            // support symbols in properties (IE11 does not support this)\n            const propKeys = [\n                ...Object.getOwnPropertyNames(props),\n                ...(typeof Object.getOwnPropertySymbols === 'function') ?\n                    Object.getOwnPropertySymbols(props) :\n                    []\n            ];\n            // This for/of is ok because propKeys is an array\n            for (const p of propKeys) {\n                // note, use of `any` is due to TypeSript lack of support for symbol in\n                // index types\n                // tslint:disable-next-line:no-any no symbol in index\n                this.createProperty(p, props[p]);\n            }\n        }\n    }\n    /**\n     * Returns the property name for the given attribute `name`.\n     * @nocollapse\n     */\n    static _attributeNameForProperty(name, options) {\n        const attribute = options.attribute;\n        return attribute === false ?\n            undefined :\n            (typeof attribute === 'string' ?\n                attribute :\n                (typeof name === 'string' ? name.toLowerCase() : undefined));\n    }\n    /**\n     * Returns true if a property should request an update.\n     * Called when a property value is set and uses the `hasChanged`\n     * option for the property if present or a strict identity check.\n     * @nocollapse\n     */\n    static _valueHasChanged(value, old, hasChanged = notEqual) {\n        return hasChanged(value, old);\n    }\n    /**\n     * Returns the property value for the given attribute value.\n     * Called via the `attributeChangedCallback` and uses the property's\n     * `converter` or `converter.fromAttribute` property option.\n     * @nocollapse\n     */\n    static _propertyValueFromAttribute(value, options) {\n        const type = options.type;\n        const converter = options.converter || defaultConverter;\n        const fromAttribute = (typeof converter === 'function' ? converter : converter.fromAttribute);\n        return fromAttribute ? fromAttribute(value, type) : value;\n    }\n    /**\n     * Returns the attribute value for the given property value. If this\n     * returns undefined, the property will *not* be reflected to an attribute.\n     * If this returns null, the attribute will be removed, otherwise the\n     * attribute will be set to the value.\n     * This uses the property's `reflect` and `type.toAttribute` property options.\n     * @nocollapse\n     */\n    static _propertyValueToAttribute(value, options) {\n        if (options.reflect === undefined) {\n            return;\n        }\n        const type = options.type;\n        const converter = options.converter;\n        const toAttribute = converter && converter.toAttribute ||\n            defaultConverter.toAttribute;\n        return toAttribute(value, type);\n    }\n    /**\n     * Performs element initialization. By default captures any pre-set values for\n     * registered properties.\n     */\n    initialize() {\n        this._saveInstanceProperties();\n        // ensures first update will be caught by an early access of\n        // `updateComplete`\n        this._requestUpdate();\n    }\n    /**\n     * Fixes any properties set on the instance before upgrade time.\n     * Otherwise these would shadow the accessor and break these properties.\n     * The properties are stored in a Map which is played back after the\n     * constructor runs. Note, on very old versions of Safari (<=9) or Chrome\n     * (<=41), properties created for native platform properties like (`id` or\n     * `name`) may not have default values set in the element constructor. On\n     * these browsers native properties appear on instances and therefore their\n     * default value will overwrite any element default (e.g. if the element sets\n     * this.id = 'id' in the constructor, the 'id' will become '' since this is\n     * the native platform default).\n     */\n    _saveInstanceProperties() {\n        // Use forEach so this works even if for/of loops are compiled to for loops\n        // expecting arrays\n        this.constructor\n            ._classProperties.forEach((_v, p) => {\n            if (this.hasOwnProperty(p)) {\n                const value = this[p];\n                delete this[p];\n                if (!this._instanceProperties) {\n                    this._instanceProperties = new Map();\n                }\n                this._instanceProperties.set(p, value);\n            }\n        });\n    }\n    /**\n     * Applies previously saved instance properties.\n     */\n    _applyInstanceProperties() {\n        // Use forEach so this works even if for/of loops are compiled to for loops\n        // expecting arrays\n        // tslint:disable-next-line:no-any\n        this._instanceProperties.forEach((v, p) => this[p] = v);\n        this._instanceProperties = undefined;\n    }\n    connectedCallback() {\n        this._updateState = this._updateState | STATE_HAS_CONNECTED;\n        // Ensure first connection completes an update. Updates cannot complete\n        // before connection and if one is pending connection the\n        // `_hasConnectionResolver` will exist. If so, resolve it to complete the\n        // update, otherwise requestUpdate.\n        if (this._hasConnectedResolver) {\n            this._hasConnectedResolver();\n            this._hasConnectedResolver = undefined;\n        }\n    }\n    /**\n     * Allows for `super.disconnectedCallback()` in extensions while\n     * reserving the possibility of making non-breaking feature additions\n     * when disconnecting at some point in the future.\n     */\n    disconnectedCallback() {\n    }\n    /**\n     * Synchronizes property values when attributes change.\n     */\n    attributeChangedCallback(name, old, value) {\n        if (old !== value) {\n            this._attributeToProperty(name, value);\n        }\n    }\n    _propertyToAttribute(name, value, options = defaultPropertyDeclaration) {\n        const ctor = this.constructor;\n        const attr = ctor._attributeNameForProperty(name, options);\n        if (attr !== undefined) {\n            const attrValue = ctor._propertyValueToAttribute(value, options);\n            // an undefined value does not change the attribute.\n            if (attrValue === undefined) {\n                return;\n            }\n            // Track if the property is being reflected to avoid\n            // setting the property again via `attributeChangedCallback`. Note:\n            // 1. this takes advantage of the fact that the callback is synchronous.\n            // 2. will behave incorrectly if multiple attributes are in the reaction\n            // stack at time of calling. However, since we process attributes\n            // in `update` this should not be possible (or an extreme corner case\n            // that we'd like to discover).\n            // mark state reflecting\n            this._updateState = this._updateState | STATE_IS_REFLECTING_TO_ATTRIBUTE;\n            if (attrValue == null) {\n                this.removeAttribute(attr);\n            }\n            else {\n                this.setAttribute(attr, attrValue);\n            }\n            // mark state not reflecting\n            this._updateState = this._updateState & ~STATE_IS_REFLECTING_TO_ATTRIBUTE;\n        }\n    }\n    _attributeToProperty(name, value) {\n        // Use tracking info to avoid deserializing attribute value if it was\n        // just set from a property setter.\n        if (this._updateState & STATE_IS_REFLECTING_TO_ATTRIBUTE) {\n            return;\n        }\n        const ctor = this.constructor;\n        const propName = ctor._attributeToPropertyMap.get(name);\n        if (propName !== undefined) {\n            const options = ctor._classProperties.get(propName) || defaultPropertyDeclaration;\n            // mark state reflecting\n            this._updateState = this._updateState | STATE_IS_REFLECTING_TO_PROPERTY;\n            this[propName] =\n                // tslint:disable-next-line:no-any\n                ctor._propertyValueFromAttribute(value, options);\n            // mark state not reflecting\n            this._updateState = this._updateState & ~STATE_IS_REFLECTING_TO_PROPERTY;\n        }\n    }\n    /**\n     * This private version of `requestUpdate` does not access or return the\n     * `updateComplete` promise. This promise can be overridden and is therefore\n     * not free to access.\n     */\n    _requestUpdate(name, oldValue) {\n        let shouldRequestUpdate = true;\n        // If we have a property key, perform property update steps.\n        if (name !== undefined) {\n            const ctor = this.constructor;\n            const options = ctor._classProperties.get(name) || defaultPropertyDeclaration;\n            if (ctor._valueHasChanged(this[name], oldValue, options.hasChanged)) {\n                if (!this._changedProperties.has(name)) {\n                    this._changedProperties.set(name, oldValue);\n                }\n                // Add to reflecting properties set.\n                // Note, it's important that every change has a chance to add the\n                // property to `_reflectingProperties`. This ensures setting\n                // attribute + property reflects correctly.\n                if (options.reflect === true &&\n                    !(this._updateState & STATE_IS_REFLECTING_TO_PROPERTY)) {\n                    if (this._reflectingProperties === undefined) {\n                        this._reflectingProperties = new Map();\n                    }\n                    this._reflectingProperties.set(name, options);\n                }\n            }\n            else {\n                // Abort the request if the property should not be considered changed.\n                shouldRequestUpdate = false;\n            }\n        }\n        if (!this._hasRequestedUpdate && shouldRequestUpdate) {\n            this._enqueueUpdate();\n        }\n    }\n    /**\n     * Requests an update which is processed asynchronously. This should\n     * be called when an element should update based on some state not triggered\n     * by setting a property. In this case, pass no arguments. It should also be\n     * called when manually implementing a property setter. In this case, pass the\n     * property `name` and `oldValue` to ensure that any configured property\n     * options are honored. Returns the `updateComplete` Promise which is resolved\n     * when the update completes.\n     *\n     * @param name {PropertyKey} (optional) name of requesting property\n     * @param oldValue {any} (optional) old value of requesting property\n     * @returns {Promise} A Promise that is resolved when the update completes.\n     */\n    requestUpdate(name, oldValue) {\n        this._requestUpdate(name, oldValue);\n        return this.updateComplete;\n    }\n    /**\n     * Sets up the element to asynchronously update.\n     */\n    async _enqueueUpdate() {\n        // Mark state updating...\n        this._updateState = this._updateState | STATE_UPDATE_REQUESTED;\n        let resolve;\n        let reject;\n        const previousUpdatePromise = this._updatePromise;\n        this._updatePromise = new Promise((res, rej) => {\n            resolve = res;\n            reject = rej;\n        });\n        try {\n            // Ensure any previous update has resolved before updating.\n            // This `await` also ensures that property changes are batched.\n            await previousUpdatePromise;\n        }\n        catch (e) {\n            // Ignore any previous errors. We only care that the previous cycle is\n            // done. Any error should have been handled in the previous update.\n        }\n        // Make sure the element has connected before updating.\n        if (!this._hasConnected) {\n            await new Promise((res) => this._hasConnectedResolver = res);\n        }\n        try {\n            const result = this.performUpdate();\n            // If `performUpdate` returns a Promise, we await it. This is done to\n            // enable coordinating updates with a scheduler. Note, the result is\n            // checked to avoid delaying an additional microtask unless we need to.\n            if (result != null) {\n                await result;\n            }\n        }\n        catch (e) {\n            reject(e);\n        }\n        resolve(!this._hasRequestedUpdate);\n    }\n    get _hasConnected() {\n        return (this._updateState & STATE_HAS_CONNECTED);\n    }\n    get _hasRequestedUpdate() {\n        return (this._updateState & STATE_UPDATE_REQUESTED);\n    }\n    get hasUpdated() {\n        return (this._updateState & STATE_HAS_UPDATED);\n    }\n    /**\n     * Performs an element update. Note, if an exception is thrown during the\n     * update, `firstUpdated` and `updated` will not be called.\n     *\n     * You can override this method to change the timing of updates. If this\n     * method is overridden, `super.performUpdate()` must be called.\n     *\n     * For instance, to schedule updates to occur just before the next frame:\n     *\n     * ```\n     * protected async performUpdate(): Promise<unknown> {\n     *   await new Promise((resolve) => requestAnimationFrame(() => resolve()));\n     *   super.performUpdate();\n     * }\n     * ```\n     */\n    performUpdate() {\n        // Mixin instance properties once, if they exist.\n        if (this._instanceProperties) {\n            this._applyInstanceProperties();\n        }\n        let shouldUpdate = false;\n        const changedProperties = this._changedProperties;\n        try {\n            shouldUpdate = this.shouldUpdate(changedProperties);\n            if (shouldUpdate) {\n                this.update(changedProperties);\n            }\n        }\n        catch (e) {\n            // Prevent `firstUpdated` and `updated` from running when there's an\n            // update exception.\n            shouldUpdate = false;\n            throw e;\n        }\n        finally {\n            // Ensure element can accept additional updates after an exception.\n            this._markUpdated();\n        }\n        if (shouldUpdate) {\n            if (!(this._updateState & STATE_HAS_UPDATED)) {\n                this._updateState = this._updateState | STATE_HAS_UPDATED;\n                this.firstUpdated(changedProperties);\n            }\n            this.updated(changedProperties);\n        }\n    }\n    _markUpdated() {\n        this._changedProperties = new Map();\n        this._updateState = this._updateState & ~STATE_UPDATE_REQUESTED;\n    }\n    /**\n     * Returns a Promise that resolves when the element has completed updating.\n     * The Promise value is a boolean that is `true` if the element completed the\n     * update without triggering another update. The Promise result is `false` if\n     * a property was set inside `updated()`. If the Promise is rejected, an\n     * exception was thrown during the update.\n     *\n     * To await additional asynchronous work, override the `_getUpdateComplete`\n     * method. For example, it is sometimes useful to await a rendered element\n     * before fulfilling this Promise. To do this, first await\n     * `super._getUpdateComplete()`, then any subsequent state.\n     *\n     * @returns {Promise} The Promise returns a boolean that indicates if the\n     * update resolved without triggering another update.\n     */\n    get updateComplete() {\n        return this._getUpdateComplete();\n    }\n    /**\n     * Override point for the `updateComplete` promise.\n     *\n     * It is not safe to override the `updateComplete` getter directly due to a\n     * limitation in TypeScript which means it is not possible to call a\n     * superclass getter (e.g. `super.updateComplete.then(...)`) when the target\n     * language is ES5 (https://github.com/microsoft/TypeScript/issues/338).\n     * This method should be overridden instead. For example:\n     *\n     *   class MyElement extends LitElement {\n     *     async _getUpdateComplete() {\n     *       await super._getUpdateComplete();\n     *       await this._myChild.updateComplete;\n     *     }\n     *   }\n     */\n    _getUpdateComplete() {\n        return this._updatePromise;\n    }\n    /**\n     * Controls whether or not `update` should be called when the element requests\n     * an update. By default, this method always returns `true`, but this can be\n     * customized to control when to update.\n     *\n     * * @param _changedProperties Map of changed properties with old values\n     */\n    shouldUpdate(_changedProperties) {\n        return true;\n    }\n    /**\n     * Updates the element. This method reflects property values to attributes.\n     * It can be overridden to render and keep updated element DOM.\n     * Setting properties inside this method will *not* trigger\n     * another update.\n     *\n     * * @param _changedProperties Map of changed properties with old values\n     */\n    update(_changedProperties) {\n        if (this._reflectingProperties !== undefined &&\n            this._reflectingProperties.size > 0) {\n            // Use forEach so this works even if for/of loops are compiled to for\n            // loops expecting arrays\n            this._reflectingProperties.forEach((v, k) => this._propertyToAttribute(k, this[k], v));\n            this._reflectingProperties = undefined;\n        }\n    }\n    /**\n     * Invoked whenever the element is updated. Implement to perform\n     * post-updating tasks via DOM APIs, for example, focusing an element.\n     *\n     * Setting properties inside this method will trigger the element to update\n     * again after this update cycle completes.\n     *\n     * * @param _changedProperties Map of changed properties with old values\n     */\n    updated(_changedProperties) {\n    }\n    /**\n     * Invoked when the element is first updated. Implement to perform one time\n     * work on the element after update.\n     *\n     * Setting properties inside this method will trigger the element to update\n     * again after this update cycle completes.\n     *\n     * * @param _changedProperties Map of changed properties with old values\n     */\n    firstUpdated(_changedProperties) {\n    }\n}\n_a = finalized;\n/**\n * Marks class as having finished creating properties.\n */\nUpdatingElement[_a] = true;\n//# sourceMappingURL=updating-element.js.map","/**\n@license\nCopyright (c) 2019 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nexport const supportsAdoptingStyleSheets = ('adoptedStyleSheets' in Document.prototype) &&\n    ('replace' in CSSStyleSheet.prototype);\nconst constructionToken = Symbol();\nexport class CSSResult {\n    constructor(cssText, safeToken) {\n        if (safeToken !== constructionToken) {\n            throw new Error('CSSResult is not constructable. Use `unsafeCSS` or `css` instead.');\n        }\n        this.cssText = cssText;\n    }\n    // Note, this is a getter so that it's lazy. In practice, this means\n    // stylesheets are not created until the first element instance is made.\n    get styleSheet() {\n        if (this._styleSheet === undefined) {\n            // Note, if `adoptedStyleSheets` is supported then we assume CSSStyleSheet\n            // is constructable.\n            if (supportsAdoptingStyleSheets) {\n                this._styleSheet = new CSSStyleSheet();\n                this._styleSheet.replaceSync(this.cssText);\n            }\n            else {\n                this._styleSheet = null;\n            }\n        }\n        return this._styleSheet;\n    }\n    toString() {\n        return this.cssText;\n    }\n}\n/**\n * Wrap a value for interpolation in a css tagged template literal.\n *\n * This is unsafe because untrusted CSS text can be used to phone home\n * or exfiltrate data to an attacker controlled site. Take care to only use\n * this with trusted input.\n */\nexport const unsafeCSS = (value) => {\n    return new CSSResult(String(value), constructionToken);\n};\nconst textFromCSSResult = (value) => {\n    if (value instanceof CSSResult) {\n        return value.cssText;\n    }\n    else if (typeof value === 'number') {\n        return value;\n    }\n    else {\n        throw new Error(`Value passed to 'css' function must be a 'css' function result: ${value}. Use 'unsafeCSS' to pass non-literal values, but\n            take care to ensure page security.`);\n    }\n};\n/**\n * Template tag which which can be used with LitElement's `style` property to\n * set element styles. For security reasons, only literal string values may be\n * used. To incorporate non-literal values `unsafeCSS` may be used inside a\n * template string part.\n */\nexport const css = (strings, ...values) => {\n    const cssText = values.reduce((acc, v, idx) => acc + textFromCSSResult(v) + strings[idx + 1], strings[0]);\n    return new CSSResult(cssText, constructionToken);\n};\n//# sourceMappingURL=css-tag.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { TemplateResult } from 'lit-html';\nimport { render } from 'lit-html/lib/shady-render.js';\nimport { UpdatingElement } from './lib/updating-element.js';\nexport * from './lib/updating-element.js';\nexport * from './lib/decorators.js';\nexport { html, svg, TemplateResult, SVGTemplateResult } from 'lit-html/lit-html.js';\nimport { supportsAdoptingStyleSheets } from './lib/css-tag.js';\nexport * from './lib/css-tag.js';\n// IMPORTANT: do not change the property name or the assignment expression.\n// This line will be used in regexes to search for LitElement usage.\n// TODO(justinfagnani): inject version number at build time\n(window['litElementVersions'] || (window['litElementVersions'] = []))\n    .push('2.2.1');\n/**\n * Minimal implementation of Array.prototype.flat\n * @param arr the array to flatten\n * @param result the accumlated result\n */\nfunction arrayFlat(styles, result = []) {\n    for (let i = 0, length = styles.length; i < length; i++) {\n        const value = styles[i];\n        if (Array.isArray(value)) {\n            arrayFlat(value, result);\n        }\n        else {\n            result.push(value);\n        }\n    }\n    return result;\n}\n/** Deeply flattens styles array. Uses native flat if available. */\nconst flattenStyles = (styles) => styles.flat ? styles.flat(Infinity) : arrayFlat(styles);\nexport class LitElement extends UpdatingElement {\n    /** @nocollapse */\n    static finalize() {\n        // The Closure JS Compiler does not always preserve the correct \"this\"\n        // when calling static super methods (b/137460243), so explicitly bind.\n        super.finalize.call(this);\n        // Prepare styling that is stamped at first render time. Styling\n        // is built from user provided `styles` or is inherited from the superclass.\n        this._styles =\n            this.hasOwnProperty(JSCompiler_renameProperty('styles', this)) ?\n                this._getUniqueStyles() :\n                this._styles || [];\n    }\n    /** @nocollapse */\n    static _getUniqueStyles() {\n        // Take care not to call `this.styles` multiple times since this generates\n        // new CSSResults each time.\n        // TODO(sorvell): Since we do not cache CSSResults by input, any\n        // shared styles will generate new stylesheet objects, which is wasteful.\n        // This should be addressed when a browser ships constructable\n        // stylesheets.\n        const userStyles = this.styles;\n        const styles = [];\n        if (Array.isArray(userStyles)) {\n            const flatStyles = flattenStyles(userStyles);\n            // As a performance optimization to avoid duplicated styling that can\n            // occur especially when composing via subclassing, de-duplicate styles\n            // preserving the last item in the list. The last item is kept to\n            // try to preserve cascade order with the assumption that it's most\n            // important that last added styles override previous styles.\n            const styleSet = flatStyles.reduceRight((set, s) => {\n                set.add(s);\n                // on IE set.add does not return the set.\n                return set;\n            }, new Set());\n            // Array.from does not work on Set in IE\n            styleSet.forEach((v) => styles.unshift(v));\n        }\n        else if (userStyles) {\n            styles.push(userStyles);\n        }\n        return styles;\n    }\n    /**\n     * Performs element initialization. By default this calls `createRenderRoot`\n     * to create the element `renderRoot` node and captures any pre-set values for\n     * registered properties.\n     */\n    initialize() {\n        super.initialize();\n        this.renderRoot =\n            this.createRenderRoot();\n        // Note, if renderRoot is not a shadowRoot, styles would/could apply to the\n        // element's getRootNode(). While this could be done, we're choosing not to\n        // support this now since it would require different logic around de-duping.\n        if (window.ShadowRoot && this.renderRoot instanceof window.ShadowRoot) {\n            this.adoptStyles();\n        }\n    }\n    /**\n     * Returns the node into which the element should render and by default\n     * creates and returns an open shadowRoot. Implement to customize where the\n     * element's DOM is rendered. For example, to render into the element's\n     * childNodes, return `this`.\n     * @returns {Element|DocumentFragment} Returns a node into which to render.\n     */\n    createRenderRoot() {\n        return this.attachShadow({ mode: 'open' });\n    }\n    /**\n     * Applies styling to the element shadowRoot using the `static get styles`\n     * property. Styling will apply using `shadowRoot.adoptedStyleSheets` where\n     * available and will fallback otherwise. When Shadow DOM is polyfilled,\n     * ShadyCSS scopes styles and adds them to the document. When Shadow DOM\n     * is available but `adoptedStyleSheets` is not, styles are appended to the\n     * end of the `shadowRoot` to [mimic spec\n     * behavior](https://wicg.github.io/construct-stylesheets/#using-constructed-stylesheets).\n     */\n    adoptStyles() {\n        const styles = this.constructor._styles;\n        if (styles.length === 0) {\n            return;\n        }\n        // There are three separate cases here based on Shadow DOM support.\n        // (1) shadowRoot polyfilled: use ShadyCSS\n        // (2) shadowRoot.adoptedStyleSheets available: use it.\n        // (3) shadowRoot.adoptedStyleSheets polyfilled: append styles after\n        // rendering\n        if (window.ShadyCSS !== undefined && !window.ShadyCSS.nativeShadow) {\n            window.ShadyCSS.ScopingShim.prepareAdoptedCssText(styles.map((s) => s.cssText), this.localName);\n        }\n        else if (supportsAdoptingStyleSheets) {\n            this.renderRoot.adoptedStyleSheets =\n                styles.map((s) => s.styleSheet);\n        }\n        else {\n            // This must be done after rendering so the actual style insertion is done\n            // in `update`.\n            this._needsShimAdoptedStyleSheets = true;\n        }\n    }\n    connectedCallback() {\n        super.connectedCallback();\n        // Note, first update/render handles styleElement so we only call this if\n        // connected after first update.\n        if (this.hasUpdated && window.ShadyCSS !== undefined) {\n            window.ShadyCSS.styleElement(this);\n        }\n    }\n    /**\n     * Updates the element. This method reflects property values to attributes\n     * and calls `render` to render DOM via lit-html. Setting properties inside\n     * this method will *not* trigger another update.\n     * * @param _changedProperties Map of changed properties with old values\n     */\n    update(changedProperties) {\n        super.update(changedProperties);\n        const templateResult = this.render();\n        if (templateResult instanceof TemplateResult) {\n            this.constructor\n                .render(templateResult, this.renderRoot, { scopeName: this.localName, eventContext: this });\n        }\n        // When native Shadow DOM is used but adoptedStyles are not supported,\n        // insert styling after rendering to ensure adoptedStyles have highest\n        // priority.\n        if (this._needsShimAdoptedStyleSheets) {\n            this._needsShimAdoptedStyleSheets = false;\n            this.constructor._styles.forEach((s) => {\n                const style = document.createElement('style');\n                style.textContent = s.cssText;\n                this.renderRoot.appendChild(style);\n            });\n        }\n    }\n    /**\n     * Invoked on each update to perform rendering tasks. This method must return\n     * a lit-html TemplateResult. Setting properties inside this method will *not*\n     * trigger the element to update.\n     */\n    render() {\n    }\n}\n/**\n * Ensure this class is marked as `finalized` as an optimization ensuring\n * it will not needlessly try to `finalize`.\n *\n * Note this property name is a string to prevent breaking Closure JS Compiler\n * optimizations. See updating-element.ts for more information.\n */\nLitElement['finalized'] = true;\n/**\n * Render method used to render the lit-html TemplateResult to the element's\n * DOM.\n * @param {TemplateResult} Template to render.\n * @param {Element|DocumentFragment} Node into which to render.\n * @param {String} Element name.\n * @nocollapse\n */\nLitElement.render = render;\n//# sourceMappingURL=lit-element.js.map","// @ts-check\nclass _AudioUtils extends EventTarget {\n    constructor() {\n        super();\n        this._notes = [];\n\n        this.playEffectNote = this.playEffectNote.bind(this);\n        this.stopNote = this.stopNote.bind(this);\n        this.convertBlobToAudioBuffer = this.convertBlobToAudioBuffer.bind(this);\n        this.loadSample = this.loadSample.bind(this);\n        this.playSample = this.playSample.bind(this);\n    }\n\n    get ctx() {\n        if(!this._audioCtx) {\n          this._audioCtx = new (AudioContext || webkitAudioContext)();\n        }\n\n        return this._audioCtx;\n    }\n\n    playEffectNote(sample, rate, note, velocity) {\n        if(velocity === undefined) velocity = 0x7F;\n        const aCtx = this.ctx;\n        const src = aCtx.createBufferSource();\n        if(rate) {\n          src.playbackRate.value = rate;\n        }\n        src.buffer = sample;\n    \n        const gainNode = aCtx.createGain();\n        gainNode.gain.value = velocity / 0x7F; \n    \n        src.connect(gainNode);\n        gainNode.connect(aCtx.destination);\n    \n        src.start(0);\n        this._notes[note] = src;\n    }\n    \n    stopNote(note) {\n        let src = this._notes[note];\n        if(src) {\n            src.stop();\n        }\n    }\n    \n    async convertBlobToAudioBuffer(blob) {\n        console.log(typeof blob);\n        const aCtx = this.ctx;\n        var reader = new FileReader();\n\n        return new Promise((resolve, reject) => {\n            reader.onload = () => {\n                aCtx.decodeAudioData(reader.result, buffer => {\n                    resolve(buffer);\n                });\n            };\n            reader.readAsArrayBuffer(blob);\n        });\n    }\n\n    async loadSample(url) {\n        const aCtx = this.ctx;\n    \n        return new Promise((resolve, reject) => {\n            fetch(url)\n            .then(response => response.arrayBuffer())\n            .then((data) => {\n                aCtx.decodeAudioData(data, buffer => {\n                    resolve(buffer);\n                });\n            });\n        });\n    }\n\n    playSample(sample) {\n        const aCtx = this.ctx;\n        const src = aCtx.createBufferSource();\n        src.buffer = sample;\n        src.connect(aCtx.destination);\n        src.start(0);\n      }\n    \n    \n}\n\nconst _instance = new _AudioUtils();\n\nexport const AudioUtils = _instance;","// @ts-check\n\n// The base class containing common functionality (EventTarget, connect/disconnect, etc.)\n\nexport class BaseControl extends EventTarget {\n    constructor(controllerType) {\n        super();\n        this._controllerType = controllerType;\n        this.devices = [];\n\n        this.MAX_VELOCITY = 0x7F;\n    }\n\n    get controllerType() {\n        return this._controllerType;\n    }\n\n    emitConnected(deviceId) {\n        if(this.devices.includes(deviceId)) {\n            throw `Device ${deviceId} on ${this._controllerType} already connected!`;\n        }\n        this.devices.push(deviceId);\n        this.dispatchEvent(new CustomEvent('connect', {detail: {type: this._controllerType, device: deviceId}}));\n    }\n\n    emitDisconnected(deviceId) {\n        const idx = this.devices.indexOf(deviceId);\n        if(idx === -1) {\n            throw `Device ${deviceId} doesn't exist on ${this._controllerType}!`;\n        }\n        this.devices.splice(idx,1);\n        this.dispatchEvent(new CustomEvent('disconnect', {detail: {type: this._controllerType, device: deviceId}}));\n    }\n\n    emitControlEvent(deviceId, data) {\n        this.dispatchEvent(new CustomEvent('midi-event', {detail: {type: this._controllerType, device: deviceId, data: data}}));\n    }\n\n    emitMessage(deviceId, message) {\n        this.currentMessage = message;\n        this.dispatchEvent(new CustomEvent('message', {detail: {type: this._controllerType, device: deviceId, message: message}}));\n    }\n}","// @ts-check\n\nexport const MIDI_MSG_TYPE = {\n    NOTE_OFF: 0x80,\n    NOTE_ON: 0x90,\n    KEY_PRESSURE: 0xA0,\n    CONTROL_CHANGE: 0xB0,\n    PROGRAM_CHANGE: 0xC0,\n    CHANNEL_PRESSURE: 0xD0,\n    PITCH_BEND_CHANGE: 0xE0\n};\n\nexport const MIDI_MSG_TYPE_NAME = {\n    0x80: 'NOTE_OFF',\n    0x90: 'NOTE_ON',\n    0xA0: 'KEY_PRESSURE',\n    0xB0: 'CONTROL_CHANGE',\n    0xC0: 'PROGRAM_CHANGE',\n    0xD0: 'CHANNEL_PRESSURE',\n    0xE0: 'PITCH_BEND_CHANGE'\n};\n","// @ts-check\n\n// Input from empiriKit motion\n// Sensors: 3D accel, touch bar\n// Output (MIDI mapped):\n//   4 axis of: -1 to 1 variable output\n// Mapped (for each)\n//   variables to quantified midi (1 axis => note around 60, 1 axis => on/off)\n\nimport {BaseControl} from './base-control.js'\n\nimport {MIDI_MSG_TYPE} from './defs.js';\n\nconst empiriKitUSBID = {\n    VID: 0x1209,\n    PID: 0xD017\n};\n\nexport class EmpiriKitControl extends BaseControl {\n    constructor() {\n        super('EmpiriKitControl');\n\n        // TODO: check for webusb support - bail out and mark an unsupported if not\n        // this could even prevent 'instrument-control' from listing it in the first place (TBD)\n\n        this._startDataStream = this._startDataStream.bind(this);\n        \n        this._note = -1;\n        this._touch = 0;\n        this._velocity = 0;\n        \n        \n        // NOTE: For now, only ONE empiriKit device at a time is supported.\n        \n        \n        window.setTimeout(() => {this.initialize()}, 0);\n    }\n    \n    initialize() {\n        // Connect to paired devices\n        navigator.usb.getDevices()\n        .then(availableDevices => {\n            // Check that this is an empiriKit device\n            for(let device of availableDevices) {\n                if(device.vendorId === empiriKitUSBID.VID && device.productId === empiriKitUSBID.PID) {\n                    this._openDevice(device);\n                }\n            }\n            throw \"no device available yet\";\n        })\n        .catch(error => { console.log(error); });\n        \n        navigator.usb.addEventListener('connect', evt => this._openDevice(evt.device));\n    }\n    \n    scan() {\n        navigator.usb.requestDevice({ filters: [{vendorId: empiriKitUSBID.VID, productId: empiriKitUSBID.PID}] })\n        .then(selectedDevice => {\n            this._openDevice(selectedDevice);\n        })\n        .catch(error => { console.log(error); });\n    }\n\n    // TODO: Switch to binary messages supported in new firmware (18.10.001)\n    readFromDevice() {\n        this.device.transferIn(5, 64).then(result => {\n            const decoder = new TextDecoder();\n            this.rstring += decoder.decode(result.data);\n            // do a quick JSON smoketest (should do better with decoder/streaming)\n            const startIdx = this.rstring.indexOf('{');\n            if(startIdx > 0) this.rstring = this.rstring.substring(startIdx);\n            const endIdx = this.rstring.indexOf('}');\n            if(endIdx > -1) {\n                const parseStr = this.rstring.substring(0, endIdx+1);\n                this.rstring = this.rstring.substring(endIdx+1);\n                try {\n                    const msg = JSON.parse(parseStr);\n                    this._handleMessage(msg);\n                    //   this.dispatchEvent(new CustomEvent('ek-event', {detail:msg}), {bubbles: true});\n                } catch(e) {\n                    console.log(\"NOT JSON:\",parseStr);\n                }\n                this.rstring = \"\";\n            }\n            this.readFromDevice();\n        })\n        .catch(error => { \n            console.log(error);\n            this.emitMessage(this.device.serialNumber, \"\");\n            this.emitDisconnected(this.device.serialNumber);\n            this.device = null;\n            this.rstring = \"\";\n        });\n    }\n    \n    sendCMD(string) {\n        console.log(`Sending to serial: [${string}]\\n`);\n        let data = new TextEncoder('utf-8').encode(string);\n        console.log(data);\n        if (this.device) {\n            this.device.transferOut(5, data);\n        }\n    };\n    \n    _startDataStream() {\n        this.sendCMD('{\"SETRTE\":10}');\n        this.sendCMD('{\"STRACC\":1}');\n        this.sendCMD('{\"STRTCH\":1}');\n    }\n    \n    _handleMessage(data) {\n        if(data.datatype === \"StreamData\") {\n            this.tick = data.tick;\n            let accelData = data.accelerometerdata;\n            let touchData = data.touchsensordata;\n            \n            if(accelData !== undefined) {\n                const deviceId = this.device.serialNumber; // FIX firmware to get real serial number\n                const accelFactor = 9.82 / (1<<14);  // TBD: Maybe we can adjust it in the firmware\n                \n                // Note: the values are adjusted to match direction and readings from Thingy:52 \n                const accel = {\n                    x: +accelData[0] * accelFactor,\n                    y: -accelData[1] * accelFactor,\n                    z: +accelData[2] * accelFactor\n                };\n                \n                // const note = Math.round(60 - accel.x);\n                const note = Math.round(60 + accel.y);\n                const velocity = Math.min(Math.max(0, Math.round(0x3f - (8 * accel.x))), this.MAX_VELOCITY);\n        \n                if(this._note != note || this._velocity != velocity) {\n                    this._note = note;\n                    this._velocity = velocity;\n                    this.emitMessage(deviceId, `Note #${this._note} @ vel ${this._velocity}`);\n                }\n            }\n            \n            if(touchData !== undefined) {\n                //this.pgel.addValue('black',((touch-20)<<14) * 0.1);\n\n                const TOUCH_MAX = 40;  // TBD\n                \n                // do some note on/off XOR logic...\n                if( (this._touch === 0 && touchData !== 0) || (this._touch !== 0 && touchData === 0) ){\n                    if(touchData !== 0) {\n                        if(this._note) {\n                            // this._velocity = Math.floor((touchData * this.MAX_VELOCITY) / TOUCH_MAX);\n                            this.emitControlEvent(this.device.serialNumber, {\n                                type: MIDI_MSG_TYPE.NOTE_ON,\n                                channel: 0,\n                                note: this._note,\n                                velocity: this._velocity});\n\n                            this._lastNote = this._note;\n                        }\n                    } else {\n                        if(this._lastNote) {\n                            this.emitControlEvent(this.device.serialNumber, {\n                                type: MIDI_MSG_TYPE.NOTE_OFF,\n                                channel: 0,\n                                note: this._lastNote,\n                                velocity: this.MAX_VELOCITY});\n                        }\n                    }\n\n                    this._touch = touchData;\n                }\n            }\n        } else if(data.datatype === \"HardwareInfo\") {\n            this.capabilities = data.capabilities;\n            this.uid = data.uid;\n            this.version = data.version;\n        } else {\n            console.log(data);\n        }\n    }\n    \n    _openDevice(device) {\n        device.open()\n        .then(_ => device.selectConfiguration(1))\n        .then(_ => device.claimInterface(2))\n        .then(_ => device.controlTransferOut({\n            requestType: 'class',\n            recipient: 'interface',\n            request: 0x22,\n            value: 0x01,\n            index: 0x02})) // Ready to receive data\n        .then(_ => { \n            // Clear current read stream buffer\n            this.rstring = \"\";\n\n            this.device = device;\n            // init the devce (get HW info, etc)\n            // TODO: Multi device support - could need proper serial numbers in firmware\n            \n            this.emitConnected(this.device.serialNumber);\n            \n            setTimeout(this._startDataStream, 500);\n            \n            this.readFromDevice(); \n        }) // Waiting for 64 bytes of data from endpoint #5.\n        .catch(error => { console.log(error); });\n    }\n    \n    \n}\n        ","// @ts-check\n\n// Collects all controllers\n\nimport {DummyControl} from './dummy-control.js';\nimport {EmpiriKitControl} from './empirikit-control.js';\nimport {KeyboardControl} from './keyboard-control.js';\nimport {Thingy52Control} from './thingy52-control.js';\nimport {WebMIDIControl} from './webmidi-control.js';\n\nconst _controllers = new Map();\n\nconst _dummyControl = new DummyControl();\nconst _empiriKitControl = new EmpiriKitControl();\nconst _keyboardControl = new KeyboardControl();\nconst _thingy52Control = new Thingy52Control();\nconst _webMIDIControl = new WebMIDIControl();\n\n//_controllers.set(_dummyControl.controllerType, _dummyControl);\n_controllers.set(_empiriKitControl.controllerType, _empiriKitControl);\n_controllers.set(_keyboardControl.controllerType, _keyboardControl);\n_controllers.set(_thingy52Control.controllerType, _thingy52Control);\n_controllers.set(_webMIDIControl.controllerType, _webMIDIControl);\n\nexport const Controllers = _controllers;","// @ts-check\n\n\nimport {BaseControl} from './base-control.js'\n\nexport class DummyControl extends BaseControl {\n    constructor() {\n        super('DummyControl');\n        \n        this._runNextCmd = this._runNextCmd.bind(this);\n\n        this._deviceId = 'Dummy1';\n\n        this._nextCmd = 0;\n\n        this._cmds = [\n            {cmd: () => { this.emitConnected(this._deviceId)}, t: 1000},\n            {cmd: () => { this.emitMessage(this._deviceId, \"Much Foo...\")}, t: 1000},\n            {cmd: () => { this.emitMessage(this._deviceId, \"Such Bar...\")}, t: 1000},\n            {cmd: () => { this.emitMessage(this._deviceId, \"\")}, t: 1000},\n            {cmd: () => { this.emitDisconnected(this._deviceId)}, t: 2000}\n        ]\n\n\n        window.setTimeout(() => {this._runNextCmd()}, 0);\n    }\n\n    _runNextCmd() {\n        const item = this._cmds[this._nextCmd];\n        this._nextCmd = ++this._nextCmd % this._cmds.length;\n        item.cmd();\n        \n        window.setTimeout(this._runNextCmd, item.t);\n    }\n\n\n}\n","// @ts-check\n\n// Input from computer keyboard\n// Sensors: keys (on/off)\n// Output (MIDI mapped):\n//   key on/off => note on/off (fixed volume?) around note 60\n\nimport { BaseControl } from './base-control.js'\nimport { MIDI_MSG_TYPE } from './defs.js';\n\nexport class KeyboardControl extends BaseControl {\n    constructor() {\n        super('KeyboardControl');\n\n        this._channel = 0;  // channels: 1 - 16 (but we zero index ;))\n\n        this._deviceId = 0;  // assuming one computer keyboard present\n\n        window.setTimeout(() => {this.initialize()}, 0);\n        window.setTimeout(() => {this.emitConnected(this._deviceId)}, 100);;\n    }\n\n    initialize() {\n        const _KEY_NOTE = {\n            \"KeyQ\":    60,\n            \"Digit2\":  61,\n            \"KeyW\":    62,\n            \"Digit3\":  63,\n            \"KeyE\":    64,\n            \"KeyR\":    65,\n            \"Digit5\":  66,\n            \"KeyT\":    67,\n            \"Digit6\":  68,\n            \"KeyY\":    69,\n            \"Digit7\":  70,\n            \"KeyU\":    71,\n            \"KeyI\":    72\n          };\n  \n          // setup key bindings\n          document.addEventListener('keydown', evt => {\n            // https://bugs.chromium.org/p/chromium/issues/detail?id=843558#c6\n            if(!evt.repeat) {\n              const note = _KEY_NOTE[evt.code];\n              if(note !== undefined) {\n                this.emitControlEvent(this._deviceId, {type: MIDI_MSG_TYPE.NOTE_ON, channel: this._channel, note: note, velocity: this.MAX_VELOCITY}); \n              } else {\n                console.log('pressed: ', evt.code);\n              }\n            //   else if(evt.code === 'KeyS') {\n            //     if(!this.$.record.disabled)\n            //       this._recordToggle();\n            //   }\n            }\n            //evt.preventDefault();\n          });\n  \n          document.addEventListener('keyup', evt => {\n            if(!evt.repeat) {\n              const note = _KEY_NOTE[evt.code];\n              if(note !== undefined) {\n                this.emitControlEvent(this._deviceId, {type: MIDI_MSG_TYPE.NOTE_OFF, channel: this._channel, note: note, velocity: this.MAX_VELOCITY}); \n              }\n            }\n          });\n        }    \n}","// @ts-check\n\n// Input from Thingy:52\n// Sensors (used): 3D accel/gyro, button\n// Output (MIDI mapped):\n//   3 axis of: -1 to 1 variable output\n// Mapped (for each)\n//   variables to quantified midi (1 axis => note around 60, 1 axis = volume, button => on/off)\n\nimport {BaseControl} from './base-control.js'\nimport { MIDI_MSG_TYPE } from './defs.js';\n\nexport class Thingy52Control extends BaseControl {\n    constructor() {\n        super('Thingy52Control');\n        window.setTimeout(() => {this.initialize()}, 0);\n\n        this._onAccelChange = this._onAccelChange.bind(this);\n        this._onButtonChange = this._onButtonChange.bind(this);\n\n        this._devices = new Map();\n    }\n\n    initialize() {\n        // todo ..\n    }\n\n    async scan() {\n        try {\n            const device = await navigator.bluetooth.requestDevice({\n                filters: [{ services: ['ef680100-9b35-4933-9b10-52ffa9740042'] }],\n                optionalServices: [\n                    \"ef680200-9b35-4933-9b10-52ffa9740042\",\n                    \"ef680300-9b35-4933-9b10-52ffa9740042\",\n                    \"ef680400-9b35-4933-9b10-52ffa9740042\",\n                    \"ef680500-9b35-4933-9b10-52ffa9740042\"\n                ]\n            });\n\n            this._attachDevice(device);\n\n        } catch (err) {\n            console.log(err); // No device was selected.\n        }\n    }\n\n    // When the GATT server is disconnected, remove the device from the list\n    _deviceDisconnected(device) {\n        console.log('Disconnected', device);\n\n        if(this._devices.has(device.id)) {\n            this._devices.delete(device.id);\n            this.emitDisconnected(device.id);\n            this.emitMessage(device.id, \"\");\n        }\n    }\n\n    async _attachDevice(device) {\n        if(this._devices.has(device.id)) {\n            console.log(\"Device already connected: \", device.id);\n            return;\n        }\n\n        const server = await device.gatt.connect();\n\n        await this._startAccelerometerNotifications(server);\n        await this._startButtonClickNotifications(server);\n\n        // Maybe we need some light to indicate accelerometer \n        // const led = await this._getLedCharacteristic(server);\n    \n        this._devices.set(device.id, device);\n    \n        device.ongattserverdisconnected = _ => this._deviceDisconnected(device);\n        \n        this.emitConnected(device.id);\n    }\n\n    _onAccelChange(event) {\n        const target = event.target;\n        const deviceId = target.service.device.id;\n\n        const accel = {\n          x: +target.value.getFloat32(0, true).toPrecision(5),\n          y: +target.value.getFloat32(4, true).toPrecision(5),\n          z: +target.value.getFloat32(8, true).toPrecision(5)\n        };\n\n        // calc note (& velocity) value\n        // quick'n'dirty test\n        const note = Math.round(60 + accel.y);\n        const velocity = Math.min(Math.max(0, Math.round(0x3f - (8 * accel.x))), this.MAX_VELOCITY);\n                    \n        if(this._note != note || this._velocity != velocity) {\n            this._note = note;\n            this._velocity = velocity;\n            this.emitMessage(deviceId, `Note #${this._note} @ vel ${this._velocity}`);\n        }\n    }\n    \n    _onButtonChange(event) {\n        const target = event.target;\n        const deviceId = target.service.device.id;\n    \n        const buttonPressed = target.value.getUint8(0) === 1;\n    \n        console.log(buttonPressed ? \"NOTE_ON\" : \"NOTE_OFF\");\n        if(buttonPressed) {\n            if(this._note) {\n                this.emitControlEvent(deviceId, {type: MIDI_MSG_TYPE.NOTE_ON, channel: 0, note: this._note, velocity: this._velocity});\n                this._lastNote = this._note;\n            }\n        } else {\n            if(this._lastNote) {\n                this.emitControlEvent(deviceId, {type: MIDI_MSG_TYPE.NOTE_OFF, channel: 0, note: this._lastNote, velocity: this.MAX_VELOCITY});\n            }\n        }\n    }\n\n    async _startAccelerometerNotifications(server) {\n        const service = await server.getPrimaryService('ef680400-9b35-4933-9b10-52ffa9740042');\n        const characteristic = await service.getCharacteristic('ef68040a-9b35-4933-9b10-52ffa9740042');\n        characteristic.addEventListener('characteristicvaluechanged', this._onAccelChange);\n        return characteristic.startNotifications();\n      }\n    \n    async _startButtonClickNotifications(server) {\n        const service = await server.getPrimaryService('ef680300-9b35-4933-9b10-52ffa9740042');\n        const characteristic = await service.getCharacteristic('ef680302-9b35-4933-9b10-52ffa9740042');\n        characteristic.addEventListener('characteristicvaluechanged', this._onButtonChange);\n        return characteristic.startNotifications();\n    }\n\n    _detachDevice(device) {\n        device.gatt.disconnect();\n        // results in _deviceDisconnected call.\n    }\n}","// @ts-check\n\n// Input from MIDI controller\n// Output:\n//   MIDI as received\n\nimport { BaseControl } from './base-control.js'\nimport { MIDI_MSG_TYPE } from './defs.js';\n\nexport class WebMIDIControl extends BaseControl {\n    constructor() {\n        super('WebMIDIControl');\n\n        this._onMIDIEvent = this._onMIDIEvent.bind(this);\n        this._onMIDIStateChange = this._onMIDIStateChange.bind(this);\n\n        window.setTimeout(() => {this.initialize()}, 0);\n    }\n\n    initialize() {\n        if (navigator.requestMIDIAccess) {\n            navigator.requestMIDIAccess({\n                sysex: false\n            }).then(midiaccess => {\n                this._midiaccess = midiaccess;\n\n                let inputs = this._midiaccess.inputs.values();\n                for (let input = inputs.next(); input && !input.done; input = inputs.next()) {\n                    console.log('midi input', input.value);\n                    input.value.onmidimessage = this._onMIDIEvent;\n                }\n\n                this._midiaccess.onstatechange = this._onMIDIStateChange;\n                \n            },\n            error => console.error(\"WebMIDI error: \" + error));\n        } else {\n             console.error(\"WebMIDI not supported.\");\n        }\n\n    }\n\n    _onMIDIEvent(evt) {\n        this.emitControlEvent(evt.currentTarget.id, this._toEvent(evt.data)); \n    }\n\n    _onMIDIStateChange(event) {\n        console.log('midi state change: ', event);\n        let port = event.port;\n        if(port instanceof MIDIInput) {\n            if(port.state === 'connected') {\n                this.emitConnected(port.id);\n                port.onmidimessage = this._onMIDIEvent;\n            } else if(port.state === 'disconnected') {\n                this.emitDisconnected(port.id);\n            }\n        }\n    }\n\n    _toEvent(msg) {\n        let result = {};\n\n        if(msg && msg.length) {\n            console.log(msg);\n            result.type = msg[0] & 0xf0;\n            result.channel = result.type != 0xf0 ? msg[0] & 0x0f : undefined;\n\n            switch(result.type) {\n                case MIDI_MSG_TYPE.NOTE_ON:\n                case MIDI_MSG_TYPE.NOTE_OFF:\n                case MIDI_MSG_TYPE.KEY_PRESSURE:\n                    result.note = msg[1];\n                    result.velocity = msg[2];\n                    break;\n                case MIDI_MSG_TYPE.CONTROL_CHANGE:\n                    result.control = msg[1];\n                    result.value = msg[2];\n                    break;\n                case MIDI_MSG_TYPE.PITCH_BEND_CHANGE:\n                    result.value = (msg[2] << 7) + msg[1];\n                default:\n                    break;\n\n            }\n\n            // Found in forum: \"Yes, a Note On message with a zero velocity is equivalent to a Note Off message.\n            // This facilitates \"running status\" which is why the status byte is not present in the second message. This is standard MIDI.\"\"\n            // also: https://stackoverflow.com/questions/3306866/why-is-there-a-velocity-parameter-for-note-off-events\n            if(result.type === MIDI_MSG_TYPE.NOTE_ON && msg[2] === 0) {\n                result.type = MIDI_MSG_TYPE.NOTE_OFF;\n            }\n            \n        }\n\n        return result;\n    }\n\n}\n","// @ts-check\nimport { html, LitElement } from 'lit-element';\n\nimport {Controllers} from '../instrument-control/instrument-control.js';\n\n\n// const _defLineColor = 'rgb(255,20,20)';\n// const _defBackgroundColor = 'rgb(50,10,10)';\n\nexport class ControllerSettings extends LitElement {\n    constructor() {\n        super();\n\n        this.onChange = this.onChange.bind(this);\n\n        for(let [type, controller] of Controllers) {\n            console.log('Controller registered:', type);\n            controller.addEventListener('connect', this.onChange);\n            controller.addEventListener('disconnect', this.onChange);\n            controller.addEventListener('message', this.onChange);\n            controller.addEventListener('midi-event', (e) => console.log('midi-event', e.detail));\n        }\n    }\n\n    onChange(evt) {\n        this.requestUpdate();\n    }\n\n    render() {\n        return html`\n          <style>\n            :host {\n              display: block;\n              margin: 0.2em;\n              background: #eee;\n              -webkit-user-select: none;\n              -moz-user-select: none;\n              user-select: none;\n              box-sizing: border-box;\n            }\n          </style>\n\n          <ul>\n          ${Array.from(Controllers).map(([key,val]) => {\n              return html`<li>${key} (${val.devices.length}) - ${val.currentMessage}</li>`\n          })}\n          </ul>\n        `;\n    }\n\n}\ncustomElements.define('controller-settings', ControllerSettings);\n","// @ts-check\nimport { html, LitElement } from 'lit-element';\n\nexport class MatButton extends LitElement {\n    render() {\n      return html`\n        <style>\n          .btn {\n            display: block;\n            position: relative;\n            box-sizing: border-box;\n            min-width: 5.14em;\n            margin: 0.2em;\n            background: transparent;\n            text-align: center;\n            font: inherit;\n            text-transform: uppercase;\n            outline: none;\n            border-radius: 5px;\n            user-select: none;\n            cursor: pointer;\n            z-index: 0;\n            padding: 0.7em 0.57em;\n            box-shadow: 0 2px 2px 0 rgba(0,0,0,0.14), 0 1px 5px 0 rgba(0,0,0,0.12), 0 3px 1px -2px rgba(0,0,0,0.2);\n            background-color:rgba(190,106,59, 1.0);\n            color: white;\n          }\n          .btn:hover {\n            box-shadow: 0 3px 3px 0 rgba(0,0,0,0.14), 0 1px 7px 0 rgba(0,0,0,0.12), 0 3px 1px -1px rgba(0,0,0,0.2);\n            background-color:rgba(190,106,59, 0.8);\n          }\n        </style>\n        <div class=\"btn\">\n          <slot></slot>\n        </div>\n      `;\n    }\n  }\n  customElements.define('mat-button', MatButton);\n","// @ts-check\nimport { html, LitElement } from 'lit-element';\n\n// Default colors for the sample visualizer (red line on dark red background)\nconst _defLineColor = 'rgb(255,20,20)';\nconst _defBackgroundColor = 'rgb(50,10,10)';\n\nexport class SampleVisualizer extends LitElement {\n  constructor() {\n      super();\n      this._data = null;\n\n      this._renderCanvas = this._renderCanvas.bind(this);\n  }\n\n  get data() {\n    return this._data;\n  }\n\n  set data(val) {\n    this._data = val;\n    this._prepData();\n    requestAnimationFrame(this._renderCanvas);\n  }\n\n  firstUpdated() {\n    this.canvas =  this.shadowRoot.getElementById(\"viz\");\n\n    // Grab the colors from the CSS Custom Properties, use the defaults if none are defined.\n    const style = getComputedStyle(this)\n    this.lineColor = style.getPropertyValue('--line-color') || _defLineColor;\n    this.backgroundColor = style.getPropertyValue('--background-color') || _defBackgroundColor;\n\n\n    // window.addEventListener('resize', this.boundResizeCanvas);\n    const ro = new ResizeObserver( entries => {\n      for (let entry of entries) {\n        const cr = entry.contentRect;\n        // console.log('Element:', entry.target);\n        // console.log(`Element size: ${cr.width}px x ${cr.height}px`);\n        // console.log(`Element padding: ${cr.top}px ; ${cr.left}px`);\n        this._width = Math.ceil(cr.width);\n        this._height = Math.ceil(cr.height);\n        this.requestUpdate();\n        requestAnimationFrame(this._renderCanvas);\n      }\n    });\n\n    // Observe one or multiple elements\n    ro.observe( this.shadowRoot.getElementById('vizdiv'));\n  }\n\n  _prepData() {\n    if(this._data instanceof AudioBuffer) {\n      this._renderData = this._data.getChannelData(0); // TBD: assume mono?\n    } else if(this._data instanceof Float32Array) {\n      this._renderData = this._data;\n    } else {\n      this._renderData = null;\n      this._renderDataMax = 0;\n      this._renderDataMin = 0;\n      return;\n    }\n\n    // TODO: test if it has a valid length...\n\n    this._renderDataMax = this._renderData.reduce((a, b) => Math.max(a, b));\n    this._renderDataMin = this._renderData.reduce((a, b) => Math.min(a, b));\n\n    this._renderCanvas();\n  }\n\n  _renderCanvas() {\n    const ctx = this.canvas.getContext(\"2d\");\n    ctx.fillStyle = this.backgroundColor;\n    ctx.fillRect(0,0,this._width, this._height);\n\n    ctx.strokeStyle = this.lineColor;\n    const cy = this._height / 2;\n    const amp = cy; // don't draw outside the box\n\n    if(this._renderData) {\n      // If the data buffer is limited in size, do full line drawing.\n      if(this._renderData.length < this._width * 4) {\n        const step = this._width / this._renderData.length;\n        let x = 0;\n\n        ctx.strokeStyle = this.lineColor;\n        ctx.lineWidth = 3;\n        ctx.beginPath();\n\n        for(let val of this._renderData) {\n          if(x === 0) {\n            ctx.moveTo(x, cy - amp * val);\n          } else {\n            ctx.lineTo(x, cy - amp * val);\n          }\n          x += step;\n        }\n\n        ctx.stroke();\n      } else {\n        // Optimized drawing for larger data sets.\n        const step = Math.floor(this._renderData.length / this._width);\n\n        ctx.fillStyle = this.lineColor;\n\n        for(let i=0; i < this._width; i++){\n          let min = 1.0;\n          let max = -1.0;\n          for (let j=0; j<step; j++) {\n              const datum = this._renderData[(i*step)+j];\n              if (datum < min)\n                  min = datum;\n              if (datum > max)\n                  max = datum;\n          }\n          ctx.fillRect(i,(1+min)*amp,1,Math.max(1,(max-min)*amp));\n        }\n      }\n    }\n  }\n\n  render() {\n    return html`\n      <style>\n        :host {\n          display: block;\n          margin:0;\n          -webkit-user-select: none;\n          -moz-user-select: none;\n          user-select: none;\n          box-sizing: border-box;\n        }\n        div {\n          display: inline-block;\n          position: relative;\n          box-sizing: border-box;\n          padding: 0.2em;\n          height:100%;\n          width:100%;\n        }\n        canvas {\n          display: block;\n          margin:0;\n          border-radius: 15px;\n          box-shadow: 0 2px 2px 0 rgba(0,0,0,0.14), 0 1px 5px 0 rgba(0,0,0,0.12), 0 3px 1px -2px rgba(0,0,0,0.2);\n        }\n      </style>\n      <div id=\"vizdiv\">\n        <canvas id=\"viz\" width=\"${this._width}\" height=\"${this._height}\"></canvas>\n      </div>\n    `;\n  }\n}\ncustomElements.define('sample-visualizer', SampleVisualizer);\n","// @ts-check\nimport { html, LitElement } from 'lit-element';\n\nimport {AudioUtils} from '../local_modules/audio-utils/audio-utils.js';\nimport {Controllers} from '../local_modules/instrument-control/instrument-control.js';\nimport { MIDI_MSG_TYPE_NAME, MIDI_MSG_TYPE } from '../local_modules/instrument-control/defs.js';\n\nimport '../local_modules/controller-settings/controller-settings.js';\nimport '../local_modules/mat-button/mat-button.js';\nimport { SampleVisualizer } from '../local_modules/sample-visualizer/sample-visualizer.js';\n\n\nexport class MainApp extends LitElement {\n\n  constructor() {\n    super();\n\n    // Bind all callbacks\n    this._doScanForEmpiriKit = this._doScanForEmpiriKit.bind(this);\n    this._doScanForThingy52 = this._doScanForThingy52.bind(this);\n    this._recordToggle = this._recordToggle.bind(this);\n    this._loadSound = this._loadSound.bind(this);\n    this._playActiveSample = this._playActiveSample.bind(this);\n\n    // To emulate an instrument playing with 1/2 tone differences, we need this factor on the playback rate between each key:\n    const toneDiff = Math.pow(2, 1/12);\n\n    for(let [type, controller] of Controllers) {\n      console.log('Controller registered:', type);\n      controller.addEventListener('connect', (e) => console.log('connect', e.detail));\n      controller.addEventListener('disconnect', (e) => console.log('disconnect', e.detail));\n      controller.addEventListener('midi-event', (e) => {\n        const msg = e.detail.data;\n        console.log('midi-event', MIDI_MSG_TYPE_NAME[msg.type], msg);\n\n        if(msg.type === MIDI_MSG_TYPE.NOTE_ON) {\n          AudioUtils.playEffectNote(this.lastRecording, Math.pow(toneDiff, msg.note-60), msg.note, msg.velocity);\n        } else if(msg.type === MIDI_MSG_TYPE.NOTE_OFF) {\n          AudioUtils.stopNote(msg.note);\n        }\n      });\n    }\n\n  }\n\n  static get properties() {\n    return {\n      isRecording: {\n        type: Boolean\n      }\n    }\n  }\n\n  _initRecording() {\n    if (navigator.getUserMedia) {\n      let constraints = { audio: true, video: false };\n      let chunks = [];\n\n      let onSuccess = stream => {\n        this.mediaRecorder = new MediaRecorder(stream, {mimeType: 'audio/webm'});\n\n        this._visualize(stream);\n\n        this.mediaRecorder.onstop = async (e) => {\n          var blob = new Blob(chunks, { 'type' : 'audio/webm' });\n          chunks = [];\n\n          this.lastRecordingBlob = blob;\n          this.lastRecording = await AudioUtils.convertBlobToAudioBuffer(blob);\n          this.isRecording = false;\n        }\n\n        this.mediaRecorder.ondataavailable = (e) => {\n          console.log(e.data);\n          chunks.push(e.data);\n        }\n      }\n\n      let onError = err => {\n        console.log(err);\n      }\n\n      navigator.getUserMedia(constraints, onSuccess, onError);\n    } else {\n      console.log('getUserMedia is not supported!');\n    }\n  }\n\n  _recordToggle() {\n    console.log(\"_recordToggle\", this.isRecording, this.mediaRecorder);\n    if(this.mediaRecorder) {\n      if(this.isRecording) {\n        this.mediaRecorder.stop();\n      } else {\n        this.mediaRecorder.start();\n        this.isRecording = true;\n      }\n    }\n  }\n\n  get lastRecording() {\n    return this._lastRecording;\n  }\n\n  set lastRecording(val) {\n    this._lastRecording = val;\n    this._lastRec.data = val;\n  }\n\n  _visualize(stream) {\n    const aCtx = AudioUtils.ctx;\n\n    let source = aCtx.createMediaStreamSource(stream);\n\n    let analyser = aCtx.createAnalyser();\n    analyser.fftSize = 1024;\n    let dataArray = new Float32Array(analyser.fftSize);\n\n    this._micSignal.data = dataArray;\n\n    source.connect(analyser);\n\n    let draw = () => {\n      requestAnimationFrame(draw);\n      analyser.getFloatTimeDomainData(dataArray);\n      this._micSignal.data = dataArray;\n    }\n\n    draw();\n  }\n\n  render() {\n    return html`\n      <style>\n        :host {\n          font-family: Bitwise, Arial;\n          color: #4a508e;\n        }\n\n        .mini-button {\n          font-size: 8pt;\n        }\n        .title {\n          font-weight: bold;\n        }\n\n        sample-visualizer {\n          height: 100px;\n          width: 100%;\n          max-width: 100%;\n        }\n\n        .live {\n          --line-color:#20ff20;\n          --background-color:#001000;\n        }\n\n        .flex-container {\n          display: flex;\n          height: 100%;\n        }\n\n        .content {\n          margin: auto;\n          position: relative;\n          width: 95%;\n          max-width: 700px;\n        }\n\n        .col {\n          display: flex;\n          flex-direction: column;\n        }\n\n        .row {\n          display: flex;\n          flex-direction: row;\n          flex-wrap: wrap;\n        }\n\n        mat-button {\n          flex-grow: 1;\n        }\n\n      </style>\n      <div class=\"flex-container\">\n        <div class=\"content\">\n          <div class=\"col\">\n            <h1>usBTronica</h1>\n            <div class=\"row\">\n              <mat-button @click='${ this._enableAudio }'>Start audio</mat-button>\n              <mat-button id=\"btnrecord\" @click='${ this._recordToggle }'>${this.isRecording ? \"Stop recording\" : \"Start recording\"}</mat-button>\n              <mat-button @click='${ this._doScanForEmpiriKit }'>Scan for empiriKit</mat-button>\n              <mat-button @click='${ this._doScanForThingy52 }'>Scan for Thingy52</mat-button>\n              <mat-button @click='${ this._loadSound }'>Load piano sound</mat-button>\n              <mat-button .hidden=${ !this._lastRecording } @click='${ this._exportSound }'>${  this._lastRecording ? \"Export Recorded Sound\" : \"...\" }</mat-button>\n            </div><br>\n            Live:\n            <sample-visualizer id='micSignal' class='live'></sample-visualizer><br>\n            Recording:\n            <sample-visualizer id=\"lastRec\" @click='${ this._playActiveSample }'></sample-visualizer><br>\n            ...TODO future cool settings:\n            <controller-settings></controller-settings>\n          </div>\n        </div>\n      </div>\n    `;\n  }\n\n  _doScanForEmpiriKit() {\n    // empiriKit|MOTION uses Web USB. Calling the first scan requires a user gesture (~ button press)\n    // After pairing, the device will be automatically re-connected (no scan needed)\n    Controllers.get('EmpiriKitControl').scan();\n  }\n\n  _doScanForThingy52() {\n    // Nordic Semiconductor Thingy:52 uses Web Bluetooth.  Scanning requires a user gesture (~ button press)\n    Controllers.get('Thingy52Control').scan();\n  }\n\n  _enableAudio() {\n    // Initiate Web Audio on a user gesture\n    const aCtx = AudioUtils.ctx;\n    aCtx.resume();\n\n    this._initRecording();\n    // TBD:  this could potentially be part of a splash screen or other natural element the user clicks anyway\n  }\n\n  async _loadSound(evt) {\n    this.lastRecording = await AudioUtils.loadSample('./assets/audio/piano_c.ogg');\n  }\n\n  _exportSound() {\n    if (this._lastRecording) {\n      const exportElement = document.createElement('a');\n      exportElement.download = `usbtronica-${Date.now()}.webm`;\n      exportElement.href = URL.createObjectURL(this.lastRecordingBlob);\n      exportElement.click();\n    }\n  }\n\n  _playActiveSample() {\n    AudioUtils.playSample(this.lastRecording);\n  }\n\n  firstUpdated() {\n    /** @type {SampleVisualizer} */\n    this._micSignal = this.shadowRoot.querySelector('#micSignal');\n\n    /** @type {SampleVisualizer} */\n    this._lastRec = this.shadowRoot.querySelector('#lastRec');\n  }\n}\n\ncustomElements.define('main-app', MainApp);"],"names":["directives","WeakMap","isDirective","o","has","isCEPolyfill","undefined","window","customElements","polyfillWrapFlushCallback","removeNodes","container","start","end","n","nextSibling","removeChild","noChange","nothing","marker","String","Math","random","slice","nodeMarker","markerRegex","RegExp","Template","[object Object]","result","element","this","parts","nodesToRemove","stack","walker","document","createTreeWalker","content","lastPartIndex","index","partIndex","strings","values","length","node","nextNode","nodeType","hasAttributes","attributes","count","i","endsWith","name","stringForPart","lastAttributeNameRegex","exec","attributeLookupName","toLowerCase","attributeValue","getAttribute","removeAttribute","statics","split","push","type","tagName","currentNode","data","indexOf","parent","parentNode","lastIndex","insert","s","createMarker","match","createTextNode","insertBefore","previousSibling","pop","str","suffix","isTemplatePartActive","part","createComment","TemplateInstance","template","processor","options","__parts","setValue","commit","fragment","cloneNode","importNode","nodeIndex","nodeName","handleTextExpression","insertAfterNode","handleAttributeExpressions","adoptNode","upgrade","commentMarker","TemplateResult","l","html","isCommentBinding","commentOpen","lastIndexOf","attributeMatch","substr","createElement","innerHTML","getHTML","isPrimitive","value","isIterable","Array","isArray","Symbol","iterator","AttributeCommitter","dirty","_createPart","AttributePart","text","v","t","setAttribute","_getValue","committer","directive","NodePart","__pendingValue","startNode","appendChild","endNode","ref","__insert","__commitText","__commitTemplateResult","Node","__commitNode","__commitIterable","clear","valueAsString","templateFactory","update","instance","_clone","itemParts","itemPart","item","appendIntoPart","insertAfterPart","BooleanAttributePart","Error","PropertyCommitter","super","single","PropertyPart","eventOptionsSupported","capture","addEventListener","removeEventListener","_e","EventPart","eventName","eventContext","__boundHandleEvent","e","handleEvent","newListener","oldListener","shouldRemoveListener","once","passive","shouldAddListener","__options","getOptions","event","call","defaultTemplateProcessor","prefix","templateCache","templateCaches","get","stringsArray","keyString","Map","set","key","join","getTemplateElement","removeNodesFromTemplate","nextActiveIndexInTemplateParts","removeCount","nodesToRemoveInTemplate","currentRemovingNode","forEach","countNodes","startIndex","getTemplateCacheKey","scopeName","compatibleShadyCSSVersion","ShadyCSS","prepareTemplateDom","console","warn","shadyTemplateFactory","cacheKey","TEMPLATE_TYPES","shadyRenderSet","Set","prepareTemplateStyles","renderedDOM","add","templateElement","styles","querySelectorAll","condensedStyle","style","textContent","templates","from","removeStylesFromLitTemplates","refNode","insertCount","walkerIndex","insertNodeIntoTemplate","firstChild","querySelector","nativeShadow","removes","JSCompiler_renameProperty","prop","_obj","defaultConverter","Boolean","Object","JSON","stringify","Number","parse","notEqual","old","defaultPropertyDeclaration","attribute","converter","reflect","hasChanged","microtaskPromise","Promise","resolve","UpdatingElement","HTMLElement","_updateState","_instanceProperties","_updatePromise","_hasConnectedResolver","_changedProperties","_reflectingProperties","initialize","observedAttributes","finalize","_classProperties","p","attr","_attributeNameForProperty","_attributeToPropertyMap","hasOwnProperty","superProperties","getPrototypeOf","k","_ensureClassProperties","noAccessor","prototype","defineProperty","oldValue","_requestUpdate","configurable","enumerable","superCtor","props","properties","propKeys","getOwnPropertyNames","getOwnPropertySymbols","createProperty","fromAttribute","toAttribute","_saveInstanceProperties","constructor","_v","_attributeToProperty","ctor","attrValue","_propertyValueToAttribute","propName","_propertyValueFromAttribute","shouldRequestUpdate","_valueHasChanged","_hasRequestedUpdate","_enqueueUpdate","updateComplete","reject","previousUpdatePromise","res","rej","_hasConnected","performUpdate","hasUpdated","_applyInstanceProperties","shouldUpdate","changedProperties","_markUpdated","firstUpdated","updated","_getUpdateComplete","size","_propertyToAttribute","supportsAdoptingStyleSheets","Document","CSSStyleSheet","flattenStyles","flat","Infinity","arrayFlat","LitElement","_styles","_getUniqueStyles","userStyles","reduceRight","unshift","renderRoot","createRenderRoot","ShadowRoot","adoptStyles","attachShadow","mode","adoptedStyleSheets","map","styleSheet","_needsShimAdoptedStyleSheets","ScopingShim","prepareAdoptedCssText","cssText","localName","connectedCallback","styleElement","templateResult","render","hasRendered","needsScoping","host","firstScopeRender","renderContainer","createDocumentFragment","assign","appendInto","litRender","delete","_AudioUtils","EventTarget","_notes","playEffectNote","bind","stopNote","convertBlobToAudioBuffer","loadSample","playSample","_audioCtx","AudioContext","webkitAudioContext","sample","rate","note","velocity","aCtx","ctx","src","createBufferSource","playbackRate","buffer","gainNode","createGain","gain","connect","destination","stop","blob","log","reader","FileReader","onload","decodeAudioData","readAsArrayBuffer","url","fetch","then","response","arrayBuffer","AudioUtils","BaseControl","controllerType","_controllerType","devices","MAX_VELOCITY","emitConnected","deviceId","includes","dispatchEvent","CustomEvent","detail","device","emitDisconnected","idx","splice","emitControlEvent","emitMessage","message","currentMessage","MIDI_MSG_TYPE","MIDI_MSG_TYPE_NAME","empiriKitUSBID","_controllers","_empiriKitControl","_runNextCmd","_deviceId","_nextCmd","_cmds","cmd","setTimeout","_startDataStream","_note","_touch","_velocity","navigator","usb","getDevices","availableDevices","vendorId","productId","_openDevice","catch","error","evt","scan","requestDevice","filters","selectedDevice","readFromDevice","transferIn","decoder","TextDecoder","rstring","decode","startIdx","substring","endIdx","parseStr","msg","_handleMessage","serialNumber","sendCMD","string","TextEncoder","encode","transferOut","datatype","tick","accelData","accelerometerdata","touchData","touchsensordata","accelFactor","accel","x","y","z","round","min","max","channel","_lastNote","capabilities","uid","version","open","_","selectConfiguration","claimInterface","controlTransferOut","requestType","recipient","request","_keyboardControl","_channel","_KEY_NOTE","repeat","code","_thingy52Control","_onAccelChange","_onButtonChange","_devices","bluetooth","services","optionalServices","_attachDevice","err","_deviceDisconnected","id","server","gatt","_startAccelerometerNotifications","_startButtonClickNotifications","ongattserverdisconnected","target","service","getFloat32","toPrecision","buttonPressed","getUint8","getPrimaryService","characteristic","getCharacteristic","startNotifications","_detachDevice","disconnect","_webMIDIControl","_onMIDIEvent","_onMIDIStateChange","requestMIDIAccess","sysex","midiaccess","_midiaccess","inputs","input","next","done","onmidimessage","onstatechange","currentTarget","_toEvent","port","MIDIInput","state","control","Controllers","define","onChange","controller","requestUpdate","val","_data","_renderCanvas","_prepData","requestAnimationFrame","canvas","shadowRoot","getElementById","getComputedStyle","lineColor","getPropertyValue","backgroundColor","ResizeObserver","entries","entry","cr","contentRect","_width","ceil","width","_height","height","observe","AudioBuffer","_renderData","getChannelData","Float32Array","_renderDataMax","_renderDataMin","reduce","a","b","getContext","fillStyle","fillRect","strokeStyle","cy","amp","step","lineWidth","beginPath","moveTo","lineTo","stroke","floor","j","datum","_doScanForEmpiriKit","_doScanForThingy52","_recordToggle","_loadSound","_playActiveSample","toneDiff","pow","lastRecording","isRecording","_initRecording","getUserMedia","constraints","audio","video","chunks","onSuccess","stream","mediaRecorder","MediaRecorder","mimeType","_visualize","onstop","async","Blob","lastRecordingBlob","ondataavailable","onError","_lastRecording","_lastRec","source","createMediaStreamSource","analyser","createAnalyser","fftSize","dataArray","_micSignal","draw","getFloatTimeDomainData","_enableAudio","_exportSound","resume","exportElement","download","Date","now","href","URL","createObjectURL","click"],"mappings":"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"}